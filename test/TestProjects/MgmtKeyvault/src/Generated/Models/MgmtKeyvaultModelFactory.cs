// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using MgmtKeyvault;

namespace MgmtKeyvault.Models
{
    internal static class MgmtKeyvaultModelFactory
    {
        /// <summary> Initializes a new instance of VaultProperties. </summary>
        /// <param name="tenantId"> The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. </param>
        /// <param name="sku"> SKU details. </param>
        /// <param name="accessPolicies"> An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault&apos;s tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required. </param>
        /// <param name="vaultUri"> The URI of the vault for performing operations on keys and secrets. </param>
        /// <param name="hsmPoolResourceId"> The resource id of HSM Pool. </param>
        /// <param name="enabledForDeployment"> Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. </param>
        /// <param name="enabledForDiskEncryption"> Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. </param>
        /// <param name="enabledForTemplateDeployment"> Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. </param>
        /// <param name="enableSoftDelete"> Property to specify whether the &apos;soft delete&apos; functionality is enabled for this key vault. If it&apos;s not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false. </param>
        /// <param name="softDeleteRetentionInDays"> softDelete data retention days. It accepts &gt;=7 and &lt;=90. </param>
        /// <param name="enableRbacAuthorization"> Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC. </param>
        /// <param name="createMode"> The vault&apos;s create mode to indicate whether the vault need to be recovered or not. </param>
        /// <param name="enablePurgeProtection"> Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value. </param>
        /// <param name="networkAcls"> Rules governing the accessibility of the key vault from specific network locations. </param>
        /// <param name="provisioningState"> Provisioning state of the vault. </param>
        /// <param name="privateEndpointConnections"> List of private endpoint connections associated with the key vault. </param>
        public static VaultProperties VaultProperties(Guid tenantId = default, MgmtKeyvaultSku sku = default, IList<AccessPolicyEntry> accessPolicies = default, Uri vaultUri = default, string hsmPoolResourceId = default, bool? enabledForDeployment = default, bool? enabledForDiskEncryption = default, bool? enabledForTemplateDeployment = default, bool? enableSoftDelete = default, int? softDeleteRetentionInDays = default, bool? enableRbacAuthorization = default, CreateMode? createMode = default, bool? enablePurgeProtection = default, NetworkRuleSet networkAcls = default, VaultProvisioningState? provisioningState = default, IReadOnlyList<PrivateEndpointConnectionItem> privateEndpointConnections = default)
        {
            return new VaultProperties(tenantId, sku, accessPolicies, vaultUri, hsmPoolResourceId, enabledForDeployment, enabledForDiskEncryption, enabledForTemplateDeployment, enableSoftDelete, softDeleteRetentionInDays, enableRbacAuthorization, createMode, enablePurgeProtection, networkAcls, provisioningState, privateEndpointConnections);
        }

        /// <summary> Initializes a new instance of MgmtKeyvaultSku. </summary>
        /// <param name="family"> SKU family name. </param>
        /// <param name="name"> SKU name to specify whether the key vault is a standard vault or a premium vault. </param>
        public static MgmtKeyvaultSku MgmtKeyvaultSku(MgmtKeyvaultSkuFamily family = default, MgmtKeyvaultSkuName name = default)
        {
            return new MgmtKeyvaultSku(family, name);
        }

        /// <summary> Initializes a new instance of AccessPolicyEntry. </summary>
        /// <param name="tenantId"> The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. </param>
        /// <param name="objectId"> The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. </param>
        /// <param name="applicationId"> Application ID of the client making request on behalf of a principal. </param>
        /// <param name="permissions"> Permissions the identity has for keys, secrets and certificates. </param>
        public static AccessPolicyEntry AccessPolicyEntry(Guid tenantId = default, string objectId = default, Guid? applicationId = default, Permissions permissions = default)
        {
            return new AccessPolicyEntry(tenantId, objectId, applicationId, permissions);
        }

        /// <summary> Initializes a new instance of Permissions. </summary>
        /// <param name="keys"> Permissions to keys. </param>
        /// <param name="secrets"> Permissions to secrets. </param>
        /// <param name="certificates"> Permissions to certificates. </param>
        /// <param name="storage"> Permissions to storage accounts. </param>
        public static Permissions Permissions(IList<KeyPermissions> keys = default, IList<SecretPermissions> secrets = default, IList<CertificatePermissions> certificates = default, IList<StoragePermissions> storage = default)
        {
            return new Permissions(keys, secrets, certificates, storage);
        }

        /// <summary> Initializes a new instance of NetworkRuleSet. </summary>
        /// <param name="bypass"> Tells what traffic can bypass network rules. This can be &apos;AzureServices&apos; or &apos;None&apos;.  If not specified the default is &apos;AzureServices&apos;. </param>
        /// <param name="defaultAction"> The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated. </param>
        /// <param name="ipRules"> The list of IP address rules. </param>
        /// <param name="virtualNetworkRules"> The list of virtual network rules. </param>
        public static NetworkRuleSet NetworkRuleSet(NetworkRuleBypassOptions? bypass = default, NetworkRuleAction? defaultAction = default, IList<IPRule> ipRules = default, IList<VirtualNetworkRule> virtualNetworkRules = default)
        {
            return new NetworkRuleSet(bypass, defaultAction, ipRules, virtualNetworkRules);
        }

        /// <summary> Initializes a new instance of IPRule. </summary>
        /// <param name="value"> An IPv4 address range in CIDR notation, such as &apos;124.56.78.91&apos; (simple IP address) or &apos;124.56.78.0/24&apos; (all addresses that start with 124.56.78). </param>
        public static IPRule IPRule(string value = default)
        {
            return new IPRule(value);
        }

        /// <summary> Initializes a new instance of VirtualNetworkRule. </summary>
        /// <param name="id"> Full resource id of a vnet subnet, such as &apos;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1&apos;. </param>
        /// <param name="ignoreMissingVnetServiceEndpoint"> Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured. </param>
        public static VirtualNetworkRule VirtualNetworkRule(string id = default, bool? ignoreMissingVnetServiceEndpoint = default)
        {
            return new VirtualNetworkRule(id, ignoreMissingVnetServiceEndpoint);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionItem. </summary>
        /// <param name="id"> Id of private endpoint connection. </param>
        /// <param name="etag"> Modified whenever there is a change in the state of private endpoint connection. </param>
        /// <param name="privateEndpoint"> Properties of the private endpoint object. </param>
        /// <param name="privateLinkServiceConnectionState"> Approval state of the private link connection. </param>
        /// <param name="provisioningState"> Provisioning state of the private endpoint connection. </param>
        public static PrivateEndpointConnectionItem PrivateEndpointConnectionItem(string id = default, string etag = default, SubResource privateEndpoint = default, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = default, PrivateEndpointConnectionProvisioningState? provisioningState = default)
        {
            return new PrivateEndpointConnectionItem(id, etag, privateEndpoint, privateLinkServiceConnectionState, provisioningState);
        }

        /// <summary> Initializes a new instance of PrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> Indicates whether the connection has been approved, rejected or removed by the key vault owner. </param>
        /// <param name="description"> The reason for approval or rejection. </param>
        /// <param name="actionsRequired"> A message indicating if changes on the service provider require any updates on the consumer. </param>
        public static PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState(PrivateEndpointServiceConnectionStatus? status = default, string description = default, ActionsRequired? actionsRequired = default)
        {
            return new PrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of CloudError. </summary>
        /// <param name="error"> An error response from Key Vault resource provider. </param>
        public static CloudError CloudError(CloudErrorBody error = default)
        {
            return new CloudError(error);
        }

        /// <summary> Initializes a new instance of CloudErrorBody. </summary>
        /// <param name="code"> Error code. This is a mnemonic that can be consumed programmatically. </param>
        /// <param name="message"> User friendly error message. The message is typically localized and may vary with service version. </param>
        public static CloudErrorBody CloudErrorBody(string code = default, string message = default)
        {
            return new CloudErrorBody(code, message);
        }

        /// <summary> Initializes a new instance of VaultAccessPolicyParameters. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The resource type of the access policy. </param>
        /// <param name="properties"> Properties of the access policy. </param>
        public static VaultAccessPolicyParameters VaultAccessPolicyParameters(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, string location = default, VaultAccessPolicyProperties properties = default)
        {
            return new VaultAccessPolicyParameters(id, name, resourceType, systemData, location, properties);
        }

        /// <summary> Initializes a new instance of VaultAccessPolicyProperties. </summary>
        /// <param name="accessPolicies"> An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault&apos;s tenant ID. </param>
        public static VaultAccessPolicyProperties VaultAccessPolicyProperties(IList<AccessPolicyEntry> accessPolicies = default)
        {
            return new VaultAccessPolicyProperties(accessPolicies);
        }

        /// <summary> Initializes a new instance of VaultListResult. </summary>
        /// <param name="value"> The list of vaults. </param>
        /// <param name="nextLink"> The URL to get the next set of vaults. </param>
        public static VaultListResult VaultListResult(IReadOnlyList<VaultData> value = default, string nextLink = default)
        {
            return new VaultListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of DeletedVaultListResult. </summary>
        /// <param name="value"> The list of deleted vaults. </param>
        /// <param name="nextLink"> The URL to get the next set of deleted vaults. </param>
        public static DeletedVaultListResult DeletedVaultListResult(IReadOnlyList<DeletedVaultData> value = default, string nextLink = default)
        {
            return new DeletedVaultListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of DeletedVaultProperties. </summary>
        /// <param name="vaultId"> The resource id of the original vault. </param>
        /// <param name="location"> The location of the original vault. </param>
        /// <param name="deletionDate"> The deleted date. </param>
        /// <param name="scheduledPurgeDate"> The scheduled purged date. </param>
        /// <param name="tags"> Tags of the original vault. </param>
        /// <param name="purgeProtectionEnabled"> Purge protection status of the original vault. </param>
        public static DeletedVaultProperties DeletedVaultProperties(string vaultId = default, string location = default, DateTimeOffset? deletionDate = default, DateTimeOffset? scheduledPurgeDate = default, IReadOnlyDictionary<string, string> tags = default, bool? purgeProtectionEnabled = default)
        {
            return new DeletedVaultProperties(vaultId, location, deletionDate, scheduledPurgeDate, tags, purgeProtectionEnabled);
        }

        /// <summary> Initializes a new instance of CheckNameAvailabilityResult. </summary>
        /// <param name="nameAvailable"> A boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used. </param>
        /// <param name="reason"> The reason that a vault name could not be used. The Reason element is only returned if NameAvailable is false. </param>
        /// <param name="message"> An error message explaining the Reason value in more detail. </param>
        public static CheckNameAvailabilityResult CheckNameAvailabilityResult(bool? nameAvailable = default, Reason? reason = default, string message = default)
        {
            return new CheckNameAvailabilityResult(nameAvailable, reason, message);
        }

        /// <summary> Initializes a new instance of MgmtKeyvaultResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Azure location of the key vault resource. </param>
        /// <param name="tags"> Tags assigned to the key vault resource. </param>
        public static MgmtKeyvaultResourceData MgmtKeyvaultResourceData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, string location = default, IReadOnlyDictionary<string, string> tags = default)
        {
            return new MgmtKeyvaultResourceData(id, name, resourceType, systemData, location, tags);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionListResult. </summary>
        /// <param name="value"> The list of private endpoint connections. </param>
        /// <param name="nextLink"> The URL to get the next set of private endpoint connections. </param>
        public static PrivateEndpointConnectionListResult PrivateEndpointConnectionListResult(IReadOnlyList<PrivateEndpointConnectionData> value = default, string nextLink = default)
        {
            return new PrivateEndpointConnectionListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of PrivateLinkResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Azure location of the key vault resource. </param>
        /// <param name="tags"> Tags assigned to the key vault resource. </param>
        /// <param name="groupId"> Group identifier of private link resource. </param>
        /// <param name="requiredMembers"> Required member names of private link resource. </param>
        /// <param name="requiredZoneNames"> Required DNS zone names of the the private link resource. </param>
        public static PrivateLinkResource PrivateLinkResource(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, string location = default, IReadOnlyDictionary<string, string> tags = default, string groupId = default, IReadOnlyList<string> requiredMembers = default, IList<string> requiredZoneNames = default)
        {
            return new PrivateLinkResource(id, name, resourceType, systemData, location, tags, groupId, requiredMembers, requiredZoneNames);
        }

        /// <summary> Initializes a new instance of ManagedHsmProperties. </summary>
        /// <param name="tenantId"> The Azure Active Directory tenant ID that should be used for authenticating requests to the managed HSM pool. </param>
        /// <param name="initialAdminObjectIds"> Array of initial administrators object ids for this managed hsm pool. </param>
        /// <param name="hsmUri"> The URI of the managed hsm pool for performing operations on keys. </param>
        /// <param name="enableSoftDelete"> Property to specify whether the &apos;soft delete&apos; functionality is enabled for this managed HSM pool. If it&apos;s not set to any value(true or false) when creating new managed HSM pool, it will be set to true by default. Once set to true, it cannot be reverted to false. </param>
        /// <param name="softDeleteRetentionInDays"> softDelete data retention days. It accepts &gt;=7 and &lt;=90. </param>
        /// <param name="enablePurgeProtection"> Property specifying whether protection against purge is enabled for this managed HSM pool. Setting this property to true activates protection against purge for this managed HSM pool and its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible. </param>
        /// <param name="createMode"> The create mode to indicate whether the resource is being created or is being recovered from a deleted resource. </param>
        /// <param name="statusMessage"> Resource Status Message. </param>
        /// <param name="provisioningState"> Provisioning state. </param>
        /// <param name="networkAcls"> Rules governing the accessibility of the key vault from specific network locations. </param>
        /// <param name="privateEndpointConnections"> List of private endpoint connections associated with the managed hsm pool. </param>
        /// <param name="publicNetworkAccess"> Control permission for data plane traffic coming from public networks while private endpoint is enabled. </param>
        /// <param name="scheduledPurgeDate"> The scheduled purge date in UTC. </param>
        public static ManagedHsmProperties ManagedHsmProperties(Guid? tenantId = default, IList<string> initialAdminObjectIds = default, Uri hsmUri = default, bool? enableSoftDelete = default, int? softDeleteRetentionInDays = default, bool? enablePurgeProtection = default, CreateMode? createMode = default, string statusMessage = default, ProvisioningState? provisioningState = default, MhsmNetworkRuleSet networkAcls = default, IReadOnlyList<MhsmPrivateEndpointConnectionItem> privateEndpointConnections = default, PublicNetworkAccess? publicNetworkAccess = default, DateTimeOffset? scheduledPurgeDate = default)
        {
            return new ManagedHsmProperties(tenantId, initialAdminObjectIds, hsmUri, enableSoftDelete, softDeleteRetentionInDays, enablePurgeProtection, createMode, statusMessage, provisioningState, networkAcls, privateEndpointConnections, publicNetworkAccess, scheduledPurgeDate);
        }

        /// <summary> Initializes a new instance of MhsmNetworkRuleSet. </summary>
        /// <param name="bypass"> Tells what traffic can bypass network rules. This can be &apos;AzureServices&apos; or &apos;None&apos;.  If not specified the default is &apos;AzureServices&apos;. </param>
        /// <param name="defaultAction"> The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated. </param>
        /// <param name="ipRules"> The list of IP address rules. </param>
        /// <param name="virtualNetworkRules"> The list of virtual network rules. </param>
        public static MhsmNetworkRuleSet MhsmNetworkRuleSet(NetworkRuleBypassOptions? bypass = default, NetworkRuleAction? defaultAction = default, IList<MhsmipRule> ipRules = default, IList<WritableSubResource> virtualNetworkRules = default)
        {
            return new MhsmNetworkRuleSet(bypass, defaultAction, ipRules, virtualNetworkRules);
        }

        /// <summary> Initializes a new instance of MhsmipRule. </summary>
        /// <param name="value"> An IPv4 address range in CIDR notation, such as &apos;124.56.78.91&apos; (simple IP address) or &apos;124.56.78.0/24&apos; (all addresses that start with 124.56.78). </param>
        public static MhsmipRule MhsmipRule(string value = default)
        {
            return new MhsmipRule(value);
        }

        /// <summary> Initializes a new instance of MhsmPrivateEndpointConnectionItem. </summary>
        /// <param name="privateEndpoint"> Properties of the private endpoint object. </param>
        /// <param name="privateLinkServiceConnectionState"> Approval state of the private link connection. </param>
        /// <param name="provisioningState"> Provisioning state of the private endpoint connection. </param>
        public static MhsmPrivateEndpointConnectionItem MhsmPrivateEndpointConnectionItem(SubResource privateEndpoint = default, MhsmPrivateLinkServiceConnectionState privateLinkServiceConnectionState = default, PrivateEndpointConnectionProvisioningState? provisioningState = default)
        {
            return new MhsmPrivateEndpointConnectionItem(privateEndpoint, privateLinkServiceConnectionState, provisioningState);
        }

        /// <summary> Initializes a new instance of MhsmPrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> Indicates whether the connection has been approved, rejected or removed by the key vault owner. </param>
        /// <param name="description"> The reason for approval or rejection. </param>
        /// <param name="actionsRequired"> A message indicating if changes on the service provider require any updates on the consumer. </param>
        public static MhsmPrivateLinkServiceConnectionState MhsmPrivateLinkServiceConnectionState(PrivateEndpointServiceConnectionStatus? status = default, string description = default, ActionsRequired? actionsRequired = default)
        {
            return new MhsmPrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of ManagedHsmResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> SKU details. </param>
        public static ManagedHsmResource ManagedHsmResource(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, ManagedHsmSku sku = default)
        {
            return new ManagedHsmResource(id, name, resourceType, systemData, tags, location, sku);
        }

        /// <summary> Initializes a new instance of ManagedHsmSku. </summary>
        /// <param name="family"> SKU Family of the managed HSM Pool. </param>
        /// <param name="name"> SKU of the managed HSM Pool. </param>
        public static ManagedHsmSku ManagedHsmSku(ManagedHsmSkuFamily family = default, ManagedHsmSkuName name = default)
        {
            return new ManagedHsmSku(family, name);
        }

        /// <summary> Initializes a new instance of ManagedHsmError. </summary>
        /// <param name="error"> The server error. </param>
        public static ManagedHsmError ManagedHsmError(Error error = default)
        {
            return new ManagedHsmError(error);
        }

        /// <summary> Initializes a new instance of Error. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="innerError"> The inner error, contains a more specific error code. </param>
        public static Error Error(string code = default, string message = default, Error innerError = default)
        {
            return new Error(code, message, innerError);
        }

        /// <summary> Initializes a new instance of ManagedHsmListResult. </summary>
        /// <param name="value"> The list of managed HSM Pools. </param>
        /// <param name="nextLink"> The URL to get the next set of managed HSM Pools. </param>
        public static ManagedHsmListResult ManagedHsmListResult(IReadOnlyList<ManagedHsmData> value = default, string nextLink = default)
        {
            return new ManagedHsmListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of MhsmPrivateEndpointConnectionsListResult. </summary>
        /// <param name="value"> The private endpoint connection associated with a managed HSM Pools. </param>
        /// <param name="nextLink"> The URL to get the next set of managed HSM Pools. </param>
        public static MhsmPrivateEndpointConnectionsListResult MhsmPrivateEndpointConnectionsListResult(IReadOnlyList<MhsmPrivateEndpointConnectionData> value = default, string nextLink = default)
        {
            return new MhsmPrivateEndpointConnectionsListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of DeletedManagedHsmListResult. </summary>
        /// <param name="value"> The list of deleted managed HSM Pools. </param>
        /// <param name="nextLink"> The URL to get the next set of deleted managed HSM Pools. </param>
        public static DeletedManagedHsmListResult DeletedManagedHsmListResult(IReadOnlyList<DeletedManagedHsmData> value = default, string nextLink = default)
        {
            return new DeletedManagedHsmListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of DeletedManagedHsmProperties. </summary>
        /// <param name="mhsmId"> The resource id of the original managed HSM. </param>
        /// <param name="location"> The location of the original managed HSM. </param>
        /// <param name="deletionDate"> The deleted date. </param>
        /// <param name="scheduledPurgeDate"> The scheduled purged date. </param>
        /// <param name="purgeProtectionEnabled"> Purge protection status of the original managed HSM. </param>
        /// <param name="tags"> Tags of the original managed HSM. </param>
        public static DeletedManagedHsmProperties DeletedManagedHsmProperties(string mhsmId = default, string location = default, DateTimeOffset? deletionDate = default, DateTimeOffset? scheduledPurgeDate = default, bool? purgeProtectionEnabled = default, IReadOnlyDictionary<string, string> tags = default)
        {
            return new DeletedManagedHsmProperties(mhsmId, location, deletionDate, scheduledPurgeDate, purgeProtectionEnabled, tags);
        }

        /// <summary> Initializes a new instance of MhsmPrivateLinkResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> SKU details. </param>
        /// <param name="groupId"> Group identifier of private link resource. </param>
        /// <param name="requiredMembers"> Required member names of private link resource. </param>
        /// <param name="requiredZoneNames"> Required DNS zone names of the the private link resource. </param>
        public static MhsmPrivateLinkResource MhsmPrivateLinkResource(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, ManagedHsmSku sku = default, string groupId = default, IReadOnlyList<string> requiredMembers = default, IList<string> requiredZoneNames = default)
        {
            return new MhsmPrivateLinkResource(id, name, resourceType, systemData, tags, location, sku, groupId, requiredMembers, requiredZoneNames);
        }
    }
}
