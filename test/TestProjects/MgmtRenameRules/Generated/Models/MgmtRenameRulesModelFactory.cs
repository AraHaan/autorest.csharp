// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using MgmtRenameRules;

namespace MgmtRenameRules.Models
{
    internal static class MgmtRenameRulesModelFactory
    {
        /// <summary> Initializes a new instance of VirtualMachineListResult. </summary>
        /// <param name="value"> The list of virtual machines. </param>
        /// <param name="nextLink"> The URI to fetch the next page of VMs. Call ListNext() with this URI to fetch the next page of Virtual Machines. </param>
        public static VirtualMachineListResult VirtualMachineListResult(IReadOnlyList<VirtualMachineData> value = default, string nextLink = default)
        {
            return new VirtualMachineListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of MgmtRenameRulesPlan. </summary>
        /// <param name="name"> The plan ID. </param>
        /// <param name="publisher"> The publisher ID. </param>
        /// <param name="product"> Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element. </param>
        /// <param name="promotionCode"> The promotion code. </param>
        public static MgmtRenameRulesPlan MgmtRenameRulesPlan(string name = default, string publisher = default, string product = default, string promotionCode = default)
        {
            return new MgmtRenameRulesPlan(name, publisher, product, promotionCode);
        }

        /// <summary> Initializes a new instance of StorageProfile. </summary>
        /// <param name="imageReference"> Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. </param>
        /// <param name="osDisk"> Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). </param>
        /// <param name="dataDisks"> Specifies the parameters that are used to add a data disk to a virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). </param>
        public static StorageProfile StorageProfile(ImageReference imageReference = default, OSDisk osDisk = default, IList<DataDisk> dataDisks = default)
        {
            return new StorageProfile(imageReference, osDisk, dataDisks);
        }

        /// <summary> Initializes a new instance of ImageReference. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="publisher"> The image publisher. </param>
        /// <param name="offer"> Specifies the offer of the platform image or marketplace image used to create the virtual machine. </param>
        /// <param name="sku"> The image SKU. </param>
        /// <param name="version"> Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or &apos;latest&apos;. Major, Minor, and Build are decimal numbers. Specify &apos;latest&apos; to use the latest version of an image available at deploy time. Even if you use &apos;latest&apos;, the VM image will not automatically update after deploy time even if a new version becomes available. </param>
        /// <param name="exactVersion"> Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from &apos;version&apos;, only if the value specified in &apos;version&apos; field is &apos;latest&apos;. </param>
        public static ImageReference ImageReference(string id = default, string publisher = default, string offer = default, string sku = default, string version = default, string exactVersion = default)
        {
            return new ImageReference(id, publisher, offer, sku, version, exactVersion);
        }

        /// <summary> Initializes a new instance of SubResource. </summary>
        /// <param name="id"> Resource Id. </param>
        public static SubResource SubResource(string id = default)
        {
            return new SubResource(id);
        }

        /// <summary> Initializes a new instance of OSDisk. </summary>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**. </param>
        /// <param name="encryptionSettings"> Specifies the encryption settings for the OS Disk. &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15. </param>
        /// <param name="name"> The disk name. </param>
        /// <param name="vhd"> The virtual hard disk. </param>
        /// <param name="image"> The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None** for Standard storage. **ReadOnly** for Premium storage. </param>
        /// <param name="writeAcceleratorEnabled"> Specifies whether writeAccelerator should be enabled or disabled on the disk. </param>
        /// <param name="diffDiskSettings"> Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine. </param>
        /// <param name="createOption"> Specifies how the virtual machine should be created.&lt;br&gt;&lt;br&gt; Possible values are:&lt;br&gt;&lt;br&gt; **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.&lt;br&gt;&lt;br&gt; **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. </param>
        /// <param name="diskSizeGB"> Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="managedDisk"> The managed disk parameters. </param>
        public static OSDisk OSDisk(OperatingSystemTypes? osType = default, DiskEncryptionSettings encryptionSettings = default, string name = default, VirtualHardDisk vhd = default, VirtualHardDisk image = default, CachingTypes? caching = default, bool? writeAcceleratorEnabled = default, DiffDiskSettings diffDiskSettings = default, DiskCreateOptionTypes createOption = default, int? diskSizeGB = default, ManagedDiskParameters managedDisk = default)
        {
            return new OSDisk(osType, encryptionSettings, name, vhd, image, caching, writeAcceleratorEnabled, diffDiskSettings, createOption, diskSizeGB, managedDisk);
        }

        /// <summary> Initializes a new instance of DiskEncryptionSettings. </summary>
        /// <param name="diskEncryptionKey"> Specifies the location of the disk encryption key, which is a Key Vault Secret. </param>
        /// <param name="keyEncryptionKey"> Specifies the location of the key encryption key in Key Vault. </param>
        /// <param name="enabled"> Specifies whether disk encryption should be enabled on the virtual machine. </param>
        public static DiskEncryptionSettings DiskEncryptionSettings(KeyVaultSecretReference diskEncryptionKey = default, KeyVaultKeyReference keyEncryptionKey = default, bool? enabled = default)
        {
            return new DiskEncryptionSettings(diskEncryptionKey, keyEncryptionKey, enabled);
        }

        /// <summary> Initializes a new instance of KeyVaultSecretReference. </summary>
        /// <param name="secretUrl"> The URL referencing a secret in a Key Vault. </param>
        /// <param name="sourceVault"> The relative URL of the Key Vault containing the secret. </param>
        public static KeyVaultSecretReference KeyVaultSecretReference(string secretUrl = default, WritableSubResource sourceVault = default)
        {
            return new KeyVaultSecretReference(secretUrl, sourceVault);
        }

        /// <summary> Initializes a new instance of KeyVaultKeyReference. </summary>
        /// <param name="keyUrl"> The URL referencing a key encryption key in Key Vault. </param>
        /// <param name="sourceVault"> The relative URL of the Key Vault containing the key. </param>
        public static KeyVaultKeyReference KeyVaultKeyReference(string keyUrl = default, WritableSubResource sourceVault = default)
        {
            return new KeyVaultKeyReference(keyUrl, sourceVault);
        }

        /// <summary> Initializes a new instance of DiffDiskSettings. </summary>
        /// <param name="option"> Specifies the ephemeral disk settings for operating system disk. </param>
        /// <param name="placement"> Specifies the ephemeral disk placement for operating system disk.&lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **CacheDisk** &lt;br&gt;&lt;br&gt; **ResourceDisk** &lt;br&gt;&lt;br&gt; Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.&lt;br&gt;&lt;br&gt; Refer to VM size documentation for Windows VM at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. </param>
        public static DiffDiskSettings DiffDiskSettings(DiffDiskOptions? option = default, DiffDiskPlacement? placement = default)
        {
            return new DiffDiskSettings(option, placement);
        }

        /// <summary> Initializes a new instance of ManagedDiskParameters. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="storageAccountType"> Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. </param>
        /// <param name="diskEncryptionSet"> Specifies the customer managed disk encryption set resource id for the managed disk. </param>
        public static ManagedDiskParameters ManagedDiskParameters(string id = default, StorageAccountTypes? storageAccountType = default, WritableSubResource diskEncryptionSet = default)
        {
            return new ManagedDiskParameters(id, storageAccountType, diskEncryptionSet);
        }

        /// <summary> Initializes a new instance of DataDisk. </summary>
        /// <param name="lun"> Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. </param>
        /// <param name="name"> The disk name. </param>
        /// <param name="vhd"> The virtual hard disk. </param>
        /// <param name="image"> The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="writeAcceleratorEnabled"> Specifies whether writeAccelerator should be enabled or disabled on the disk. </param>
        /// <param name="createOption"> Specifies how the virtual machine should be created.&lt;br&gt;&lt;br&gt; Possible values are:&lt;br&gt;&lt;br&gt; **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.&lt;br&gt;&lt;br&gt; **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. </param>
        /// <param name="diskSizeGB"> Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="managedDisk"> The managed disk parameters. </param>
        /// <param name="toBeDetached"> Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset. </param>
        /// <param name="diskIopsReadWrite"> Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set. </param>
        /// <param name="diskMBpsReadWrite"> Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set. </param>
        public static DataDisk DataDisk(int lun = default, string name = default, VirtualHardDisk vhd = default, VirtualHardDisk image = default, CachingTypes? caching = default, bool? writeAcceleratorEnabled = default, DiskCreateOptionTypes createOption = default, int? diskSizeGB = default, ManagedDiskParameters managedDisk = default, bool? toBeDetached = default, long? diskIopsReadWrite = default, long? diskMBpsReadWrite = default)
        {
            return new DataDisk(lun, name, vhd, image, caching, writeAcceleratorEnabled, createOption, diskSizeGB, managedDisk, toBeDetached, diskIopsReadWrite, diskMBpsReadWrite);
        }

        /// <summary> Initializes a new instance of OSProfile. </summary>
        /// <param name="computerName"> Specifies the host OS name of the virtual machine. &lt;br&gt;&lt;br&gt; This name cannot be updated after the VM is created. &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 15 characters &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 64 characters. &lt;br&gt;&lt;br&gt; For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions). </param>
        /// <param name="adminUsername"> Specifies the name of the administrator account. &lt;br&gt;&lt;br&gt; This property cannot be updated after the VM is created. &lt;br&gt;&lt;br&gt; **Windows-only restriction:** Cannot end in &quot;.&quot; &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;administrator&quot;, &quot;admin&quot;, &quot;user&quot;, &quot;user1&quot;, &quot;test&quot;, &quot;user2&quot;, &quot;test1&quot;, &quot;user3&quot;, &quot;admin1&quot;, &quot;1&quot;, &quot;123&quot;, &quot;a&quot;, &quot;actuser&quot;, &quot;adm&quot;, &quot;admin2&quot;, &quot;aspnet&quot;, &quot;backup&quot;, &quot;console&quot;, &quot;david&quot;, &quot;guest&quot;, &quot;john&quot;, &quot;owner&quot;, &quot;root&quot;, &quot;server&quot;, &quot;sql&quot;, &quot;support&quot;, &quot;support_388945a0&quot;, &quot;sys&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;user4&quot;, &quot;user5&quot;. &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 1  character &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 64 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 20 characters  &lt;br&gt;&lt;br&gt;&lt;li&gt; For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)&lt;br&gt;&lt;li&gt; For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json). </param>
        /// <param name="adminPassword"> Specifies the password of the administrator account. &lt;br&gt;&lt;br&gt; **Minimum-length (Windows):** 8 characters &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 6 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 123 characters &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 72 characters &lt;br&gt;&lt;br&gt; **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled &lt;br&gt; Has lower characters &lt;br&gt;Has upper characters &lt;br&gt; Has a digit &lt;br&gt; Has a special character (Regex match [\W_]) &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;abc@123&quot;, &quot;P@$$w0rd&quot;, &quot;P@ssw0rd&quot;, &quot;P@ssword123&quot;, &quot;Pa$$word&quot;, &quot;pass@word1&quot;, &quot;Password!&quot;, &quot;Password1&quot;, &quot;Password22&quot;, &quot;iloveyou!&quot; &lt;br&gt;&lt;br&gt; For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password). </param>
        /// <param name="customData"> Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. &lt;br&gt;&lt;br&gt; **Note: Do not pass any secrets or passwords in customData property** &lt;br&gt;&lt;br&gt; This property cannot be updated after the VM is created. &lt;br&gt;&lt;br&gt; customData is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) &lt;br&gt;&lt;br&gt; For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json). </param>
        /// <param name="windowsConfiguration"> Specifies Windows operating system settings on the virtual machine. </param>
        /// <param name="linuxConfiguration"> Specifies the Linux operating system settings on the virtual machine. &lt;br&gt;&lt;br&gt;For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) &lt;br&gt;&lt;br&gt; For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json). </param>
        /// <param name="secrets"> Specifies set of certificates that should be installed onto the virtual machine. </param>
        /// <param name="allowExtensionOperations"> Specifies whether extension operations should be allowed on the virtual machine. &lt;br&gt;&lt;br&gt;This may only be set to False when no extensions are present on the virtual machine. </param>
        /// <param name="requireGuestProvisionSignal"> Specifies whether the guest provision signal is required to infer provision success of the virtual machine.  **Note: This property is for private testing only, and all customers must not set the property to false.**. </param>
        public static OSProfile OSProfile(string computerName = default, string adminUsername = default, string adminPassword = default, string customData = default, WindowsConfiguration windowsConfiguration = default, LinuxConfiguration linuxConfiguration = default, IList<VaultSecretGroup> secrets = default, bool? allowExtensionOperations = default, bool? requireGuestProvisionSignal = default)
        {
            return new OSProfile(computerName, adminUsername, adminPassword, customData, windowsConfiguration, linuxConfiguration, secrets, allowExtensionOperations, requireGuestProvisionSignal);
        }

        /// <summary> Initializes a new instance of WindowsConfiguration. </summary>
        /// <param name="provisionVmAgent"> Indicates whether virtual machine agent should be provisioned on the virtual machine. &lt;br&gt;&lt;br&gt; When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later. </param>
        /// <param name="enableAutomaticUpdates"> Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. &lt;br&gt;&lt;br&gt; For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning. </param>
        /// <param name="timeZone"> Specifies the time zone of the virtual machine. e.g. &quot;Pacific Standard Time&quot;. &lt;br&gt;&lt;br&gt; Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones). </param>
        /// <param name="additionalUnattendContent"> Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. </param>
        /// <param name="patchSettings"> Specifies settings related to in-guest patching (KBs). </param>
        /// <param name="winRM"> Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. </param>
        public static WindowsConfiguration WindowsConfiguration(bool? provisionVmAgent = default, bool? enableAutomaticUpdates = default, string timeZone = default, IList<AdditionalUnattendContent> additionalUnattendContent = default, PatchSettings patchSettings = default, WinRMConfiguration winRM = default)
        {
            return new WindowsConfiguration(provisionVmAgent, enableAutomaticUpdates, timeZone, additionalUnattendContent, patchSettings, winRM);
        }

        /// <summary> Initializes a new instance of AdditionalUnattendContent. </summary>
        /// <param name="passName"> The pass name. Currently, the only allowable value is OobeSystem. </param>
        /// <param name="componentName"> The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup. </param>
        /// <param name="settingName"> Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon. </param>
        /// <param name="content"> Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted. </param>
        public static AdditionalUnattendContent AdditionalUnattendContent(string passName = default, string componentName = default, SettingNames? settingName = default, string content = default)
        {
            return new AdditionalUnattendContent(passName, componentName, settingName, content);
        }

        /// <summary> Initializes a new instance of WinRMListener. </summary>
        /// <param name="protocol"> Specifies the protocol of WinRM listener. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;**http** &lt;br&gt;&lt;br&gt; **https**. </param>
        /// <param name="certificateUrl"> This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: &lt;br&gt;&lt;br&gt; {&lt;br&gt;  &quot;data&quot;:&quot;&lt;Base64-encoded-certificate&gt;&quot;,&lt;br&gt;  &quot;dataType&quot;:&quot;pfx&quot;,&lt;br&gt;  &quot;password&quot;:&quot;&lt;pfx-file-password&gt;&quot;&lt;br&gt;}. </param>
        public static WinRMListener WinRMListener(ProtocolTypes? protocol = default, string certificateUrl = default)
        {
            return new WinRMListener(protocol, certificateUrl);
        }

        /// <summary> Initializes a new instance of LinuxConfiguration. </summary>
        /// <param name="disablePasswordAuthentication"> Specifies whether password authentication should be disabled. </param>
        /// <param name="ssh"> Specifies the ssh key configuration for a Linux OS. </param>
        /// <param name="provisionVmAgent"> Indicates whether virtual machine agent should be provisioned on the virtual machine. &lt;br&gt;&lt;br&gt; When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later. </param>
        public static LinuxConfiguration LinuxConfiguration(bool? disablePasswordAuthentication = default, SshConfiguration ssh = default, bool? provisionVmAgent = default)
        {
            return new LinuxConfiguration(disablePasswordAuthentication, ssh, provisionVmAgent);
        }

        /// <summary> Initializes a new instance of SshPublicKeyInfo. </summary>
        /// <param name="path"> Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys. </param>
        /// <param name="keyData"> SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. &lt;br&gt;&lt;br&gt; For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json). </param>
        public static SshPublicKeyInfo SshPublicKeyInfo(string path = default, string keyData = default)
        {
            return new SshPublicKeyInfo(path, keyData);
        }

        /// <summary> Initializes a new instance of VaultSecretGroup. </summary>
        /// <param name="sourceVault"> The relative URL of the Key Vault containing all of the certificates in VaultCertificates. </param>
        /// <param name="vaultCertificates"> The list of key vault references in SourceVault which contain certificates. </param>
        public static VaultSecretGroup VaultSecretGroup(WritableSubResource sourceVault = default, IList<VaultCertificate> vaultCertificates = default)
        {
            return new VaultSecretGroup(sourceVault, vaultCertificates);
        }

        /// <summary> Initializes a new instance of VaultCertificate. </summary>
        /// <param name="certificateUrl"> This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: &lt;br&gt;&lt;br&gt; {&lt;br&gt;  &quot;data&quot;:&quot;&lt;Base64-encoded-certificate&gt;&quot;,&lt;br&gt;  &quot;dataType&quot;:&quot;pfx&quot;,&lt;br&gt;  &quot;password&quot;:&quot;&lt;pfx-file-password&gt;&quot;&lt;br&gt;}. </param>
        /// <param name="certificateStore"> For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. &lt;br&gt;&lt;br&gt;For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &amp;lt;UppercaseThumbprint&amp;gt;.crt for the X509 certificate file and &amp;lt;UppercaseThumbprint&amp;gt;.prv for private key. Both of these files are .pem formatted. </param>
        public static VaultCertificate VaultCertificate(string certificateUrl = default, string certificateStore = default)
        {
            return new VaultCertificate(certificateUrl, certificateStore);
        }

        /// <summary> Initializes a new instance of NetworkInterfaceReference. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="primary"> Specifies the primary network interface in case the virtual machine has more than 1 network interface. </param>
        public static NetworkInterfaceReference NetworkInterfaceReference(string id = default, bool? primary = default)
        {
            return new NetworkInterfaceReference(id, primary);
        }

        /// <summary> Initializes a new instance of BootDiagnostics. </summary>
        /// <param name="enabled"> Whether boot diagnostics should be enabled on the Virtual Machine. </param>
        /// <param name="storageUri"> Uri of the storage account to use for placing the console output and screenshot. &lt;br&gt;&lt;br&gt;If storageUri is not specified while enabling boot diagnostics, managed storage will be used. </param>
        public static BootDiagnostics BootDiagnostics(bool? enabled = default, Uri storageUri = default)
        {
            return new BootDiagnostics(enabled, storageUri);
        }

        /// <summary> Initializes a new instance of VirtualMachineInstanceView. </summary>
        /// <param name="platformUpdateDomain"> Specifies the update domain of the virtual machine. </param>
        /// <param name="platformFaultDomain"> Specifies the fault domain of the virtual machine. </param>
        /// <param name="computerName"> The computer name assigned to the virtual machine. </param>
        /// <param name="osName"> The Operating System running on the virtual machine. </param>
        /// <param name="osVersion"> The version of Operating System running on the virtual machine. </param>
        /// <param name="hyperVGeneration"> Specifies the HyperVGeneration Type associated with a resource. </param>
        /// <param name="rdpThumbPrint"> The Remote desktop certificate thumbprint. </param>
        /// <param name="vmAgent"> The VM Agent running on the virtual machine. </param>
        /// <param name="maintenanceRedeployStatus"> The Maintenance Operation status on the virtual machine. </param>
        /// <param name="disks"> The virtual machine disk information. </param>
        /// <param name="vmHealth"> The health status for the VM. </param>
        /// <param name="bootDiagnostics"> Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. &lt;br&gt;&lt;br&gt; You can easily view the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you to see a screenshot of the VM from the hypervisor. </param>
        /// <param name="assignedHost"> Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <param name="patchStatus"> The status of virtual machine patch operations. </param>
        public static VirtualMachineInstanceView VirtualMachineInstanceView(int? platformUpdateDomain = default, int? platformFaultDomain = default, string computerName = default, string osName = default, string osVersion = default, HyperVGenerationType? hyperVGeneration = default, string rdpThumbPrint = default, VirtualMachineAgentInstanceView vmAgent = default, MaintenanceRedeployStatus maintenanceRedeployStatus = default, IReadOnlyList<DiskInstanceView> disks = default, VirtualMachineHealthStatus vmHealth = default, BootDiagnosticsInstanceView bootDiagnostics = default, string assignedHost = default, IReadOnlyList<InstanceViewStatus> statuses = default, VirtualMachinePatchStatus patchStatus = default)
        {
            return new VirtualMachineInstanceView(platformUpdateDomain, platformFaultDomain, computerName, osName, osVersion, hyperVGeneration, rdpThumbPrint, vmAgent, maintenanceRedeployStatus, disks, vmHealth, bootDiagnostics, assignedHost, statuses, patchStatus);
        }

        /// <summary> Initializes a new instance of VirtualMachineAgentInstanceView. </summary>
        /// <param name="vmAgentVersion"> The VM Agent full version. </param>
        /// <param name="extensionHandlers"> The virtual machine extension handler instance view. </param>
        /// <param name="statuses"> The resource status information. </param>
        public static VirtualMachineAgentInstanceView VirtualMachineAgentInstanceView(string vmAgentVersion = default, IReadOnlyList<VirtualMachineExtensionHandlerInstanceView> extensionHandlers = default, IReadOnlyList<InstanceViewStatus> statuses = default)
        {
            return new VirtualMachineAgentInstanceView(vmAgentVersion, extensionHandlers, statuses);
        }

        /// <summary> Initializes a new instance of VirtualMachineExtensionHandlerInstanceView. </summary>
        /// <param name="virtualMachineExtensionHandlerInstanceViewType"> Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="status"> The extension handler status. </param>
        public static VirtualMachineExtensionHandlerInstanceView VirtualMachineExtensionHandlerInstanceView(string virtualMachineExtensionHandlerInstanceViewType = default, string typeHandlerVersion = default, InstanceViewStatus status = default)
        {
            return new VirtualMachineExtensionHandlerInstanceView(virtualMachineExtensionHandlerInstanceViewType, typeHandlerVersion, status);
        }

        /// <summary> Initializes a new instance of InstanceViewStatus. </summary>
        /// <param name="code"> The status code. </param>
        /// <param name="level"> The level code. </param>
        /// <param name="displayStatus"> The short localizable label for the status. </param>
        /// <param name="message"> The detailed status message, including for alerts and error messages. </param>
        /// <param name="time"> The time of the status. </param>
        public static InstanceViewStatus InstanceViewStatus(string code = default, StatusLevelTypes? level = default, string displayStatus = default, string message = default, DateTimeOffset? time = default)
        {
            return new InstanceViewStatus(code, level, displayStatus, message, time);
        }

        /// <summary> Initializes a new instance of MaintenanceRedeployStatus. </summary>
        /// <param name="isCustomerInitiatedMaintenanceAllowed"> True, if customer is allowed to perform Maintenance. </param>
        /// <param name="preMaintenanceWindowStartTime"> Start Time for the Pre Maintenance Window. </param>
        /// <param name="preMaintenanceWindowEndTime"> End Time for the Pre Maintenance Window. </param>
        /// <param name="maintenanceWindowStartTime"> Start Time for the Maintenance Window. </param>
        /// <param name="maintenanceWindowEndTime"> End Time for the Maintenance Window. </param>
        /// <param name="lastOperationResultCode"> The Last Maintenance Operation Result Code. </param>
        /// <param name="lastOperationMessage"> Message returned for the last Maintenance Operation. </param>
        public static MaintenanceRedeployStatus MaintenanceRedeployStatus(bool? isCustomerInitiatedMaintenanceAllowed = default, DateTimeOffset? preMaintenanceWindowStartTime = default, DateTimeOffset? preMaintenanceWindowEndTime = default, DateTimeOffset? maintenanceWindowStartTime = default, DateTimeOffset? maintenanceWindowEndTime = default, MaintenanceOperationResultCodeTypes? lastOperationResultCode = default, string lastOperationMessage = default)
        {
            return new MaintenanceRedeployStatus(isCustomerInitiatedMaintenanceAllowed, preMaintenanceWindowStartTime, preMaintenanceWindowEndTime, maintenanceWindowStartTime, maintenanceWindowEndTime, lastOperationResultCode, lastOperationMessage);
        }

        /// <summary> Initializes a new instance of DiskInstanceView. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="encryptionSettings"> Specifies the encryption settings for the OS Disk. &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15. </param>
        /// <param name="statuses"> The resource status information. </param>
        public static DiskInstanceView DiskInstanceView(string name = default, IReadOnlyList<DiskEncryptionSettings> encryptionSettings = default, IReadOnlyList<InstanceViewStatus> statuses = default)
        {
            return new DiskInstanceView(name, encryptionSettings, statuses);
        }

        /// <summary> Initializes a new instance of BootDiagnosticsInstanceView. </summary>
        /// <param name="consoleScreenshotBlobUri"> The console screenshot blob URI. &lt;br&gt;&lt;br&gt;NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage. </param>
        /// <param name="serialConsoleLogBlobUri"> The serial console log blob Uri. &lt;br&gt;&lt;br&gt;NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage. </param>
        /// <param name="status"> The boot diagnostics status information for the VM. &lt;br&gt;&lt;br&gt; NOTE: It will be set only if there are errors encountered in enabling boot diagnostics. </param>
        public static BootDiagnosticsInstanceView BootDiagnosticsInstanceView(Uri consoleScreenshotBlobUri = default, Uri serialConsoleLogBlobUri = default, InstanceViewStatus status = default)
        {
            return new BootDiagnosticsInstanceView(consoleScreenshotBlobUri, serialConsoleLogBlobUri, status);
        }

        /// <summary> Initializes a new instance of VirtualMachinePatchStatus. </summary>
        /// <param name="availablePatchSummary"> The available patch summary of the latest assessment operation for the virtual machine. </param>
        /// <param name="lastPatchInstallationSummary"> The installation summary of the latest installation operation for the virtual machine. </param>
        public static VirtualMachinePatchStatus VirtualMachinePatchStatus(AvailablePatchSummary availablePatchSummary = default, LastPatchInstallationSummary lastPatchInstallationSummary = default)
        {
            return new VirtualMachinePatchStatus(availablePatchSummary, lastPatchInstallationSummary);
        }

        /// <summary> Initializes a new instance of AvailablePatchSummary. </summary>
        /// <param name="status"> The overall success or failure status of the operation. It remains &quot;InProgress&quot; until the operation completes. At that point it will become &quot;Failed&quot;, &quot;Succeeded&quot;, or &quot;CompletedWithWarnings.&quot;. </param>
        /// <param name="assessmentActivityId"> The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs. </param>
        /// <param name="rebootPending"> The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred. </param>
        /// <param name="criticalAndSecurityPatchCount"> The number of critical or security patches that have been detected as available and not yet installed. </param>
        /// <param name="otherPatchCount"> The number of all available patches excluding critical and security. </param>
        /// <param name="uri"> The managed application artifact blob uri. </param>
        /// <param name="startTime"> The UTC timestamp when the operation began. </param>
        /// <param name="lastModifiedTime"> The UTC timestamp when the operation began. </param>
        /// <param name="error"> The errors that were encountered during execution of the operation. The details array contains the list of them. </param>
        public static AvailablePatchSummary AvailablePatchSummary(PatchOperationStatus? status = default, string assessmentActivityId = default, bool? rebootPending = default, int? criticalAndSecurityPatchCount = default, int? otherPatchCount = default, Uri uri = default, DateTimeOffset? startTime = default, DateTimeOffset? lastModifiedTime = default, ApiError error = default)
        {
            return new AvailablePatchSummary(status, assessmentActivityId, rebootPending, criticalAndSecurityPatchCount, otherPatchCount, uri, startTime, lastModifiedTime, error);
        }

        /// <summary> Initializes a new instance of ApiError. </summary>
        /// <param name="details"> The Api error details. </param>
        /// <param name="innererror"> The Api inner error. </param>
        /// <param name="code"> The error code. </param>
        /// <param name="target"> The target of the particular error. </param>
        /// <param name="message"> The error message. </param>
        public static ApiError ApiError(IReadOnlyList<ApiErrorBase> details = default, InnerError innererror = default, string code = default, string target = default, string message = default)
        {
            return new ApiError(details, innererror, code, target, message);
        }

        /// <summary> Initializes a new instance of ApiErrorBase. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="target"> The target of the particular error. </param>
        /// <param name="message"> The error message. </param>
        public static ApiErrorBase ApiErrorBase(string code = default, string target = default, string message = default)
        {
            return new ApiErrorBase(code, target, message);
        }

        /// <summary> Initializes a new instance of InnerError. </summary>
        /// <param name="exceptiontype"> The exception type. </param>
        /// <param name="errordetail"> The internal error message or exception dump. </param>
        public static InnerError InnerError(string exceptiontype = default, string errordetail = default)
        {
            return new InnerError(exceptiontype, errordetail);
        }

        /// <summary> Initializes a new instance of LastPatchInstallationSummary. </summary>
        /// <param name="status"> The overall success or failure status of the operation. It remains &quot;InProgress&quot; until the operation completes. At that point it will become &quot;Failed&quot;, &quot;Succeeded&quot;, or &quot;CompletedWithWarnings.&quot;. </param>
        /// <param name="installationActivityId"> The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs. </param>
        /// <param name="maintenanceWindowExceeded"> Describes whether the operation ran out of time before it completed all its intended actions. </param>
        /// <param name="rebootStatus"> The reboot status of the machine after the patch operation. It will be in &quot;NotNeeded&quot; status if reboot is not needed after the patch operation. &quot;Required&quot; will be the status once the patch is applied and machine is required to reboot. &quot;Started&quot; will be the reboot status when the machine has started to reboot. &quot;Failed&quot; will be the status if the machine is failed to reboot. &quot;Completed&quot; will be the status once the machine is rebooted successfully. </param>
        /// <param name="notSelectedPatchCount"> The number of all available patches but not going to be installed because it didn&apos;t match a classification or inclusion list entry. </param>
        /// <param name="excludedPatchCount"> The number of all available patches but excluded explicitly by a customer-specified exclusion list match. </param>
        /// <param name="pendingPatchCount"> The number of all available patches expected to be installed over the course of the patch installation operation. </param>
        /// <param name="installedPatchCount"> The count of patches that successfully installed. </param>
        /// <param name="failedPatchCount"> The count of patches that failed installation. </param>
        /// <param name="startTime"> The UTC timestamp when the operation began. </param>
        /// <param name="lastModifiedTime"> The UTC timestamp when the operation began. </param>
        /// <param name="startedBy"> The person or system account that started the operation. </param>
        /// <param name="error"> The errors that were encountered during execution of the operation. The details array contains the list of them. </param>
        public static LastPatchInstallationSummary LastPatchInstallationSummary(PatchOperationStatus? status = default, string installationActivityId = default, bool? maintenanceWindowExceeded = default, RebootStatus? rebootStatus = default, int? notSelectedPatchCount = default, int? excludedPatchCount = default, int? pendingPatchCount = default, int? installedPatchCount = default, int? failedPatchCount = default, DateTimeOffset? startTime = default, DateTimeOffset? lastModifiedTime = default, string startedBy = default, ApiError error = default)
        {
            return new LastPatchInstallationSummary(status, installationActivityId, maintenanceWindowExceeded, rebootStatus, notSelectedPatchCount, excludedPatchCount, pendingPatchCount, installedPatchCount, failedPatchCount, startTime, lastModifiedTime, startedBy, error);
        }

        /// <summary> Initializes a new instance of ImageStorageProfile. </summary>
        /// <param name="osDisk"> Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). </param>
        /// <param name="dataDisks"> Specifies the parameters that are used to add a data disk to a virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). </param>
        /// <param name="zoneResilient"> Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS). </param>
        public static ImageStorageProfile ImageStorageProfile(ImageOSDisk osDisk = default, IList<ImageDataDisk> dataDisks = default, bool? zoneResilient = default)
        {
            return new ImageStorageProfile(osDisk, dataDisks, zoneResilient);
        }

        /// <summary> Initializes a new instance of ImageOSDisk. </summary>
        /// <param name="snapshot"> The snapshot. </param>
        /// <param name="managedDisk"> The managedDisk. </param>
        /// <param name="blobUri"> The Virtual Hard Disk. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="diskSizeGB"> Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="storageAccountType"> Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. </param>
        /// <param name="diskEncryptionSet"> Specifies the customer managed disk encryption set resource id for the managed image disk. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**. </param>
        /// <param name="osState"> The OS State. </param>
        public static ImageOSDisk ImageOSDisk(WritableSubResource snapshot = default, WritableSubResource managedDisk = default, Uri blobUri = default, CachingTypes? caching = default, int? diskSizeGB = default, StorageAccountTypes? storageAccountType = default, WritableSubResource diskEncryptionSet = default, OperatingSystemTypes osType = default, OperatingSystemStateTypes osState = default)
        {
            return new ImageOSDisk(snapshot, managedDisk, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSet, osType, osState);
        }

        /// <summary> Initializes a new instance of ImageDisk. </summary>
        /// <param name="snapshot"> The snapshot. </param>
        /// <param name="managedDisk"> The managedDisk. </param>
        /// <param name="blobUri"> The Virtual Hard Disk. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="diskSizeGB"> Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="storageAccountType"> Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. </param>
        /// <param name="diskEncryptionSet"> Specifies the customer managed disk encryption set resource id for the managed image disk. </param>
        public static ImageDisk ImageDisk(WritableSubResource snapshot = default, WritableSubResource managedDisk = default, Uri blobUri = default, CachingTypes? caching = default, int? diskSizeGB = default, StorageAccountTypes? storageAccountType = default, WritableSubResource diskEncryptionSet = default)
        {
            return new ImageDisk(snapshot, managedDisk, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSet);
        }

        /// <summary> Initializes a new instance of ImageDataDisk. </summary>
        /// <param name="snapshot"> The snapshot. </param>
        /// <param name="managedDisk"> The managedDisk. </param>
        /// <param name="blobUri"> The Virtual Hard Disk. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="diskSizeGB"> Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="storageAccountType"> Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. </param>
        /// <param name="diskEncryptionSet"> Specifies the customer managed disk encryption set resource id for the managed image disk. </param>
        /// <param name="lun"> Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. </param>
        public static ImageDataDisk ImageDataDisk(WritableSubResource snapshot = default, WritableSubResource managedDisk = default, Uri blobUri = default, CachingTypes? caching = default, int? diskSizeGB = default, StorageAccountTypes? storageAccountType = default, WritableSubResource diskEncryptionSet = default, int lun = default)
        {
            return new ImageDataDisk(snapshot, managedDisk, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSet, lun);
        }

        /// <summary> Initializes a new instance of ImageListResult. </summary>
        /// <param name="value"> The list of Images. </param>
        /// <param name="nextLink"> The uri to fetch the next page of Images. Call ListNext() with this to fetch the next page of Images. </param>
        public static ImageListResult ImageListResult(IReadOnlyList<ImageData> value = default, string nextLink = default)
        {
            return new ImageListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of VirtualMachineCaptureResult. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="schema"> the schema of the captured virtual machine. </param>
        /// <param name="contentVersion"> the version of the content. </param>
        /// <param name="parameters"> parameters of the captured virtual machine. </param>
        /// <param name="resources"> a list of resource items of the captured virtual machine. </param>
        public static VirtualMachineCaptureResult VirtualMachineCaptureResult(string id = default, string schema = default, string contentVersion = default, BinaryData parameters = default, IReadOnlyList<BinaryData> resources = default)
        {
            return new VirtualMachineCaptureResult(id, schema, contentVersion, parameters, resources);
        }

        /// <summary> Initializes a new instance of VirtualMachineSizeListResult. </summary>
        /// <param name="value"> The list of virtual machine sizes. </param>
        public static VirtualMachineSizeListResult VirtualMachineSizeListResult(IReadOnlyList<VirtualMachineSize> value = default)
        {
            return new VirtualMachineSizeListResult(value);
        }

        /// <summary> Initializes a new instance of VirtualMachineSize. </summary>
        /// <param name="name"> The name of the virtual machine size. </param>
        /// <param name="numberOfCores"> The number of cores supported by the virtual machine size. </param>
        /// <param name="osDiskSizeInMB"> The OS disk size, in MB, allowed by the virtual machine size. </param>
        /// <param name="resourceDiskSizeInMB"> The resource disk size, in MB, allowed by the virtual machine size. </param>
        /// <param name="memoryInMB"> The amount of memory, in MB, supported by the virtual machine size. </param>
        /// <param name="maxDataDiskCount"> The maximum number of data disks that can be attached to the virtual machine size. </param>
        public static VirtualMachineSize VirtualMachineSize(string name = default, int? numberOfCores = default, int? osDiskSizeInMB = default, int? resourceDiskSizeInMB = default, int? memoryInMB = default, int? maxDataDiskCount = default)
        {
            return new VirtualMachineSize(name, numberOfCores, osDiskSizeInMB, resourceDiskSizeInMB, memoryInMB, maxDataDiskCount);
        }

        /// <summary> Initializes a new instance of CloudError. </summary>
        /// <param name="error"> Api error. </param>
        public static CloudError CloudError(ApiError error = default)
        {
            return new CloudError(error);
        }

        /// <summary> Initializes a new instance of RetrieveBootDiagnosticsDataResult. </summary>
        /// <param name="consoleScreenshotBlobUri"> The console screenshot blob URI. </param>
        /// <param name="serialConsoleLogBlobUri"> The serial console log blob URI. </param>
        public static RetrieveBootDiagnosticsDataResult RetrieveBootDiagnosticsDataResult(Uri consoleScreenshotBlobUri = default, Uri serialConsoleLogBlobUri = default)
        {
            return new RetrieveBootDiagnosticsDataResult(consoleScreenshotBlobUri, serialConsoleLogBlobUri);
        }

        /// <summary> Initializes a new instance of VirtualMachineAssessPatchesResult. </summary>
        /// <param name="status"> The overall success or failure status of the operation. It remains &quot;InProgress&quot; until the operation completes. At that point it will become &quot;Failed&quot;, &quot;Succeeded&quot;, or &quot;CompletedWithWarnings.&quot;. </param>
        /// <param name="assessmentActivityId"> The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs. </param>
        /// <param name="rebootPending"> The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred. </param>
        /// <param name="criticalAndSecurityPatchCount"> The number of critical or security patches that have been detected as available and not yet installed. </param>
        /// <param name="otherPatchCount"> The number of all available patches excluding critical and security. </param>
        /// <param name="startDateTime"> The UTC timestamp when the operation began. </param>
        /// <param name="patches"> The list of patches that have been detected as available for installation. </param>
        /// <param name="error"> The errors that were encountered during execution of the operation. The details array contains the list of them. </param>
        public static VirtualMachineAssessPatchesResult VirtualMachineAssessPatchesResult(PatchOperationStatus? status = default, string assessmentActivityId = default, bool? rebootPending = default, int? criticalAndSecurityPatchCount = default, int? otherPatchCount = default, DateTimeOffset? startDateTime = default, IReadOnlyList<VirtualMachineSoftwarePatchProperties> patches = default, ApiError error = default)
        {
            return new VirtualMachineAssessPatchesResult(status, assessmentActivityId, rebootPending, criticalAndSecurityPatchCount, otherPatchCount, startDateTime, patches, error);
        }

        /// <summary> Initializes a new instance of VirtualMachineSoftwarePatchProperties. </summary>
        /// <param name="patchId"> A unique identifier for the patch. </param>
        /// <param name="name"> The friendly name of the patch. </param>
        /// <param name="version"> The version number of the patch. This property applies only to Linux patches. </param>
        /// <param name="kbid"> The KBID of the patch. Only applies to Windows patches. </param>
        /// <param name="classifications"> The classification(s) of the patch as provided by the patch publisher. </param>
        /// <param name="rebootBehavior"> Describes the reboot requirements of the patch. </param>
        /// <param name="activityId"> The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs. </param>
        /// <param name="publishedDate"> The UTC timestamp when the repository published this patch. </param>
        /// <param name="lastModifiedDateTime"> The UTC timestamp of the last update to this patch record. </param>
        /// <param name="assessmentState"> Describes the outcome of an install operation for a given patch. </param>
        public static VirtualMachineSoftwarePatchProperties VirtualMachineSoftwarePatchProperties(string patchId = default, string name = default, string version = default, string kbid = default, IReadOnlyList<string> classifications = default, SoftwareUpdateRebootBehavior? rebootBehavior = default, string activityId = default, DateTimeOffset? publishedDate = default, DateTimeOffset? lastModifiedDateTime = default, PatchAssessmentState? assessmentState = default)
        {
            return new VirtualMachineSoftwarePatchProperties(patchId, name, version, kbid, classifications, rebootBehavior, activityId, publishedDate, lastModifiedDateTime, assessmentState);
        }

        /// <summary> Initializes a new instance of MgmtRenameRulesSku. </summary>
        /// <param name="name"> The sku name. </param>
        /// <param name="tier"> Specifies the tier of virtual machines in a scale set.&lt;br /&gt;&lt;br /&gt; Possible Values:&lt;br /&gt;&lt;br /&gt; **Standard**&lt;br /&gt;&lt;br /&gt; **Basic**. </param>
        /// <param name="capacity"> Specifies the number of virtual machines in the scale set. </param>
        public static MgmtRenameRulesSku MgmtRenameRulesSku(string name = default, string tier = default, long? capacity = default)
        {
            return new MgmtRenameRulesSku(name, tier, capacity);
        }

        /// <summary> Initializes a new instance of UpgradePolicy. </summary>
        /// <param name="mode"> Specifies the mode of an upgrade to virtual machines in the scale set.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.&lt;br /&gt;&lt;br /&gt; **Automatic** - All virtual machines in the scale set are  automatically updated at the same time. </param>
        /// <param name="rollingUpgradePolicy"> The configuration parameters used while performing a rolling upgrade. </param>
        /// <param name="automaticOSUpgradePolicy"> Configuration parameters used for performing automatic OS Upgrade. </param>
        public static UpgradePolicy UpgradePolicy(UpgradeMode? mode = default, RollingUpgradePolicy rollingUpgradePolicy = default, AutomaticOSUpgradePolicy automaticOSUpgradePolicy = default)
        {
            return new UpgradePolicy(mode, rollingUpgradePolicy, automaticOSUpgradePolicy);
        }

        /// <summary> Initializes a new instance of RollingUpgradePolicy. </summary>
        /// <param name="maxBatchInstancePercent"> The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%. </param>
        /// <param name="maxUnhealthyInstancePercent"> The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%. </param>
        /// <param name="maxUnhealthyUpgradedInstancePercent"> The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%. </param>
        /// <param name="pauseTimeBetweenBatches"> The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S). </param>
        public static RollingUpgradePolicy RollingUpgradePolicy(int? maxBatchInstancePercent = default, int? maxUnhealthyInstancePercent = default, int? maxUnhealthyUpgradedInstancePercent = default, string pauseTimeBetweenBatches = default)
        {
            return new RollingUpgradePolicy(maxBatchInstancePercent, maxUnhealthyInstancePercent, maxUnhealthyUpgradedInstancePercent, pauseTimeBetweenBatches);
        }

        /// <summary> Initializes a new instance of AutomaticOSUpgradePolicy. </summary>
        /// <param name="enableAutomaticOSUpgrade"> Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. &lt;br&gt;&lt;br&gt; If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true. </param>
        /// <param name="disableAutomaticRollback"> Whether OS image rollback feature should be disabled. Default value is false. </param>
        public static AutomaticOSUpgradePolicy AutomaticOSUpgradePolicy(bool? enableAutomaticOSUpgrade = default, bool? disableAutomaticRollback = default)
        {
            return new AutomaticOSUpgradePolicy(enableAutomaticOSUpgrade, disableAutomaticRollback);
        }

        /// <summary> Initializes a new instance of AutomaticRepairsPolicy. </summary>
        /// <param name="enabled"> Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false. </param>
        /// <param name="gracePeriod"> The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 30 minutes (PT30M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M). </param>
        public static AutomaticRepairsPolicy AutomaticRepairsPolicy(bool? enabled = default, string gracePeriod = default)
        {
            return new AutomaticRepairsPolicy(enabled, gracePeriod);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmProfile. </summary>
        /// <param name="osProfile"> Specifies the operating system settings for the virtual machines in the scale set. </param>
        /// <param name="storageProfile"> Specifies the storage settings for the virtual machine disks. </param>
        /// <param name="networkProfile"> Specifies properties of the network interfaces of the virtual machines in the scale set. </param>
        /// <param name="securityProfile"> Specifies the Security related profile settings for the virtual machines in the scale set. </param>
        /// <param name="diagnosticsProfile"> Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum api-version: 2015-06-15. </param>
        /// <param name="extensionProfile"> Specifies a collection of settings for extensions installed on virtual machines in the scale set. </param>
        /// <param name="licenseType"> Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15. </param>
        /// <param name="priority"> Specifies the priority for the virtual machines in the scale set. &lt;br&gt;&lt;br&gt;Minimum api-version: 2017-10-30-preview. </param>
        /// <param name="evictionPolicy"> Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. &lt;br&gt;&lt;br&gt;For Azure Spot virtual machines, both &apos;Deallocate&apos; and &apos;Delete&apos; are supported and the minimum api-version is 2019-03-01. &lt;br&gt;&lt;br&gt;For Azure Spot scale sets, both &apos;Deallocate&apos; and &apos;Delete&apos; are supported and the minimum api-version is 2017-10-30-preview. </param>
        /// <param name="billingProfile"> Specifies the billing related details of a Azure Spot VMSS. &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01. </param>
        /// <param name="scheduledEventsProfile"> Specifies Scheduled Event related configurations. </param>
        public static VirtualMachineScaleSetVmProfile VirtualMachineScaleSetVmProfile(VirtualMachineScaleSetOSProfile osProfile = default, VirtualMachineScaleSetStorageProfile storageProfile = default, VirtualMachineScaleSetNetworkProfile networkProfile = default, SecurityProfile securityProfile = default, DiagnosticsProfile diagnosticsProfile = default, VirtualMachineScaleSetExtensionProfile extensionProfile = default, string licenseType = default, VirtualMachinePriorityTypes? priority = default, VirtualMachineEvictionPolicyTypes? evictionPolicy = default, BillingProfile billingProfile = default, ScheduledEventsProfile scheduledEventsProfile = default)
        {
            return new VirtualMachineScaleSetVmProfile(osProfile, storageProfile, networkProfile, securityProfile, diagnosticsProfile, extensionProfile, licenseType, priority, evictionPolicy, billingProfile, scheduledEventsProfile);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetOSProfile. </summary>
        /// <param name="computerNamePrefix"> Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long. </param>
        /// <param name="adminUsername"> Specifies the name of the administrator account. &lt;br&gt;&lt;br&gt; **Windows-only restriction:** Cannot end in &quot;.&quot; &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;administrator&quot;, &quot;admin&quot;, &quot;user&quot;, &quot;user1&quot;, &quot;test&quot;, &quot;user2&quot;, &quot;test1&quot;, &quot;user3&quot;, &quot;admin1&quot;, &quot;1&quot;, &quot;123&quot;, &quot;a&quot;, &quot;actuser&quot;, &quot;adm&quot;, &quot;admin2&quot;, &quot;aspnet&quot;, &quot;backup&quot;, &quot;console&quot;, &quot;david&quot;, &quot;guest&quot;, &quot;john&quot;, &quot;owner&quot;, &quot;root&quot;, &quot;server&quot;, &quot;sql&quot;, &quot;support&quot;, &quot;support_388945a0&quot;, &quot;sys&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;user4&quot;, &quot;user5&quot;. &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 1  character &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 64 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 20 characters  &lt;br&gt;&lt;br&gt;&lt;li&gt; For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)&lt;br&gt;&lt;li&gt; For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json). </param>
        /// <param name="adminPassword"> Specifies the password of the administrator account. &lt;br&gt;&lt;br&gt; **Minimum-length (Windows):** 8 characters &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 6 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 123 characters &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 72 characters &lt;br&gt;&lt;br&gt; **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled &lt;br&gt; Has lower characters &lt;br&gt;Has upper characters &lt;br&gt; Has a digit &lt;br&gt; Has a special character (Regex match [\W_]) &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;abc@123&quot;, &quot;P@$$w0rd&quot;, &quot;P@ssw0rd&quot;, &quot;P@ssword123&quot;, &quot;Pa$$word&quot;, &quot;pass@word1&quot;, &quot;Password!&quot;, &quot;Password1&quot;, &quot;Password22&quot;, &quot;iloveyou!&quot; &lt;br&gt;&lt;br&gt; For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password). </param>
        /// <param name="customData"> Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. &lt;br&gt;&lt;br&gt; For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json). </param>
        /// <param name="windowsConfiguration"> Specifies Windows operating system settings on the virtual machine. </param>
        /// <param name="linuxConfiguration"> Specifies the Linux operating system settings on the virtual machine. &lt;br&gt;&lt;br&gt;For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) &lt;br&gt;&lt;br&gt; For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json). </param>
        /// <param name="secrets"> Specifies set of certificates that should be installed onto the virtual machines in the scale set. </param>
        public static VirtualMachineScaleSetOSProfile VirtualMachineScaleSetOSProfile(string computerNamePrefix = default, string adminUsername = default, string adminPassword = default, string customData = default, WindowsConfiguration windowsConfiguration = default, LinuxConfiguration linuxConfiguration = default, IList<VaultSecretGroup> secrets = default)
        {
            return new VirtualMachineScaleSetOSProfile(computerNamePrefix, adminUsername, adminPassword, customData, windowsConfiguration, linuxConfiguration, secrets);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetStorageProfile. </summary>
        /// <param name="imageReference"> Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. </param>
        /// <param name="osDisk"> Specifies information about the operating system disk used by the virtual machines in the scale set. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). </param>
        /// <param name="dataDisks"> Specifies the parameters that are used to add data disks to the virtual machines in the scale set. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). </param>
        public static VirtualMachineScaleSetStorageProfile VirtualMachineScaleSetStorageProfile(ImageReference imageReference = default, VirtualMachineScaleSetOSDisk osDisk = default, IList<VirtualMachineScaleSetDataDisk> dataDisks = default)
        {
            return new VirtualMachineScaleSetStorageProfile(imageReference, osDisk, dataDisks);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetOSDisk. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="writeAcceleratorEnabled"> Specifies whether writeAccelerator should be enabled or disabled on the disk. </param>
        /// <param name="createOption"> Specifies how the virtual machines in the scale set should be created.&lt;br&gt;&lt;br&gt; The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. </param>
        /// <param name="diffDiskSettings"> Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set. </param>
        /// <param name="diskSizeGB"> Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**. </param>
        /// <param name="image"> Specifies information about the unmanaged user image to base the scale set on. </param>
        /// <param name="vhdContainers"> Specifies the container urls that are used to store operating system disks for the scale set. </param>
        /// <param name="managedDisk"> The managed disk parameters. </param>
        public static VirtualMachineScaleSetOSDisk VirtualMachineScaleSetOSDisk(string name = default, CachingTypes? caching = default, bool? writeAcceleratorEnabled = default, DiskCreateOptionTypes createOption = default, DiffDiskSettings diffDiskSettings = default, int? diskSizeGB = default, OperatingSystemTypes? osType = default, VirtualHardDisk image = default, IList<string> vhdContainers = default, VirtualMachineScaleSetManagedDiskParameters managedDisk = default)
        {
            return new VirtualMachineScaleSetOSDisk(name, caching, writeAcceleratorEnabled, createOption, diffDiskSettings, diskSizeGB, osType, image, vhdContainers, managedDisk);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetManagedDiskParameters. </summary>
        /// <param name="storageAccountType"> Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. </param>
        /// <param name="diskEncryptionSet"> Specifies the customer managed disk encryption set resource id for the managed disk. </param>
        public static VirtualMachineScaleSetManagedDiskParameters VirtualMachineScaleSetManagedDiskParameters(StorageAccountTypes? storageAccountType = default, WritableSubResource diskEncryptionSet = default)
        {
            return new VirtualMachineScaleSetManagedDiskParameters(storageAccountType, diskEncryptionSet);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetDataDisk. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="lun"> Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="writeAcceleratorEnabled"> Specifies whether writeAccelerator should be enabled or disabled on the disk. </param>
        /// <param name="createOption"> The create option. </param>
        /// <param name="diskSizeGB"> Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="managedDisk"> The managed disk parameters. </param>
        /// <param name="diskIopsReadWrite"> Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB. </param>
        /// <param name="diskMBpsReadWrite"> Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB. </param>
        public static VirtualMachineScaleSetDataDisk VirtualMachineScaleSetDataDisk(string name = default, int lun = default, CachingTypes? caching = default, bool? writeAcceleratorEnabled = default, DiskCreateOptionTypes createOption = default, int? diskSizeGB = default, VirtualMachineScaleSetManagedDiskParameters managedDisk = default, long? diskIopsReadWrite = default, long? diskMBpsReadWrite = default)
        {
            return new VirtualMachineScaleSetDataDisk(name, lun, caching, writeAcceleratorEnabled, createOption, diskSizeGB, managedDisk, diskIopsReadWrite, diskMBpsReadWrite);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetNetworkProfile. </summary>
        /// <param name="healthProbe"> A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}&apos;. </param>
        /// <param name="networkInterfaceConfigurations"> The list of network configurations. </param>
        public static VirtualMachineScaleSetNetworkProfile VirtualMachineScaleSetNetworkProfile(WritableSubResource healthProbe = default, IList<VirtualMachineScaleSetNetworkConfiguration> networkInterfaceConfigurations = default)
        {
            return new VirtualMachineScaleSetNetworkProfile(healthProbe, networkInterfaceConfigurations);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetNetworkConfiguration. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The network configuration name. </param>
        /// <param name="primary"> Specifies the primary network interface in case the virtual machine has more than 1 network interface. </param>
        /// <param name="enableAcceleratedNetworking"> Specifies whether the network interface is accelerated networking-enabled. </param>
        /// <param name="networkSecurityGroup"> The network security group. </param>
        /// <param name="dnsSettings"> The dns settings to be applied on the network interfaces. </param>
        /// <param name="ipConfigurations"> Specifies the IP configurations of the network interface. </param>
        /// <param name="enableIPForwarding"> Whether IP forwarding enabled on this NIC. </param>
        public static VirtualMachineScaleSetNetworkConfiguration VirtualMachineScaleSetNetworkConfiguration(string id = default, string name = default, bool? primary = default, bool? enableAcceleratedNetworking = default, WritableSubResource networkSecurityGroup = default, VirtualMachineScaleSetNetworkConfigurationDnsSettings dnsSettings = default, IList<VirtualMachineScaleSetIPConfiguration> ipConfigurations = default, bool? enableIPForwarding = default)
        {
            return new VirtualMachineScaleSetNetworkConfiguration(id, name, primary, enableAcceleratedNetworking, networkSecurityGroup, dnsSettings, ipConfigurations, enableIPForwarding);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetIPConfiguration. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The IP configuration name. </param>
        /// <param name="subnet"> Specifies the identifier of the subnet. </param>
        /// <param name="primary"> Specifies the primary network interface in case the virtual machine has more than 1 network interface. </param>
        /// <param name="publicIPAddressConfiguration"> The publicIPAddressConfiguration. </param>
        /// <param name="privateIPAddressVersion"> Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: &apos;IPv4&apos; and &apos;IPv6&apos;. </param>
        /// <param name="applicationGatewayBackendAddressPools"> Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway. </param>
        /// <param name="applicationSecurityGroups"> Specifies an array of references to application security group. </param>
        /// <param name="loadBalancerBackendAddressPools"> Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer. </param>
        /// <param name="loadBalancerInboundNatPools"> Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer. </param>
        public static VirtualMachineScaleSetIPConfiguration VirtualMachineScaleSetIPConfiguration(string id = default, string name = default, WritableSubResource subnet = default, bool? primary = default, VirtualMachineScaleSetPublicIPAddressConfiguration publicIPAddressConfiguration = default, IPVersion? privateIPAddressVersion = default, IList<WritableSubResource> applicationGatewayBackendAddressPools = default, IList<WritableSubResource> applicationSecurityGroups = default, IList<WritableSubResource> loadBalancerBackendAddressPools = default, IList<WritableSubResource> loadBalancerInboundNatPools = default)
        {
            return new VirtualMachineScaleSetIPConfiguration(id, name, subnet, primary, publicIPAddressConfiguration, privateIPAddressVersion, applicationGatewayBackendAddressPools, applicationSecurityGroups, loadBalancerBackendAddressPools, loadBalancerInboundNatPools);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetPublicIPAddressConfiguration. </summary>
        /// <param name="name"> The publicIP address configuration name. </param>
        /// <param name="idleTimeoutInMinutes"> The idle timeout of the public IP address. </param>
        /// <param name="dnsSettings"> The dns settings to be applied on the publicIP addresses . </param>
        /// <param name="ipTags"> The list of IP tags associated with the public IP address. </param>
        /// <param name="publicIPPrefix"> The PublicIPPrefix from which to allocate publicIP addresses. </param>
        /// <param name="publicIPAddressVersion"> Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: &apos;IPv4&apos; and &apos;IPv6&apos;. </param>
        public static VirtualMachineScaleSetPublicIPAddressConfiguration VirtualMachineScaleSetPublicIPAddressConfiguration(string name = default, int? idleTimeoutInMinutes = default, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings dnsSettings = default, IList<VirtualMachineScaleSetIPTag> ipTags = default, WritableSubResource publicIPPrefix = default, IPVersion? publicIPAddressVersion = default)
        {
            return new VirtualMachineScaleSetPublicIPAddressConfiguration(name, idleTimeoutInMinutes, dnsSettings, ipTags, publicIPPrefix, publicIPAddressVersion);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetIPTag. </summary>
        /// <param name="ipTagType"> IP tag type. Example: FirstPartyUsage. </param>
        /// <param name="tag"> IP tag associated with the public IP. Example: SQL, Storage etc. </param>
        public static VirtualMachineScaleSetIPTag VirtualMachineScaleSetIPTag(string ipTagType = default, string tag = default)
        {
            return new VirtualMachineScaleSetIPTag(ipTagType, tag);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetExtensionProfile. </summary>
        /// <param name="extensions"> The virtual machine scale set child extension resources. </param>
        /// <param name="extensionsTimeBudget"> Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). &lt;br&gt;&lt;br&gt; Minimum api-version: 2020-06-01. </param>
        public static VirtualMachineScaleSetExtensionProfile VirtualMachineScaleSetExtensionProfile(IList<VirtualMachineScaleSetExtensionData> extensions = default, string extensionsTimeBudget = default)
        {
            return new VirtualMachineScaleSetExtensionProfile(extensions, extensionsTimeBudget);
        }

        /// <summary> Initializes a new instance of SubResourceReadOnly. </summary>
        /// <param name="id"> Resource Id. </param>
        public static SubResourceReadOnly SubResourceReadOnly(string id = default)
        {
            return new SubResourceReadOnly(id);
        }

        /// <summary> Initializes a new instance of TerminateNotificationProfile. </summary>
        /// <param name="notBeforeTimeout"> Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M). </param>
        /// <param name="enable"> Specifies whether the Terminate Scheduled event is enabled or disabled. </param>
        public static TerminateNotificationProfile TerminateNotificationProfile(string notBeforeTimeout = default, bool? enable = default)
        {
            return new TerminateNotificationProfile(notBeforeTimeout, enable);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetUpdateNetworkConfiguration. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The network configuration name. </param>
        /// <param name="primary"> Whether this is a primary NIC on a virtual machine. </param>
        /// <param name="enableAcceleratedNetworking"> Specifies whether the network interface is accelerated networking-enabled. </param>
        /// <param name="networkSecurityGroup"> The network security group. </param>
        /// <param name="dnsSettings"> The dns settings to be applied on the network interfaces. </param>
        /// <param name="ipConfigurations"> The virtual machine scale set IP Configuration. </param>
        /// <param name="enableIPForwarding"> Whether IP forwarding enabled on this NIC. </param>
        public static VirtualMachineScaleSetUpdateNetworkConfiguration VirtualMachineScaleSetUpdateNetworkConfiguration(string id = default, string name = default, bool? primary = default, bool? enableAcceleratedNetworking = default, WritableSubResource networkSecurityGroup = default, VirtualMachineScaleSetNetworkConfigurationDnsSettings dnsSettings = default, IList<VirtualMachineScaleSetUpdateIPConfiguration> ipConfigurations = default, bool? enableIPForwarding = default)
        {
            return new VirtualMachineScaleSetUpdateNetworkConfiguration(id, name, primary, enableAcceleratedNetworking, networkSecurityGroup, dnsSettings, ipConfigurations, enableIPForwarding);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetUpdateIPConfiguration. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The IP configuration name. </param>
        /// <param name="subnet"> The subnet. </param>
        /// <param name="primary"> Specifies the primary IP Configuration in case the network interface has more than one IP Configuration. </param>
        /// <param name="publicIPAddressConfiguration"> The publicIPAddressConfiguration. </param>
        /// <param name="privateIPAddressVersion"> Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: &apos;IPv4&apos; and &apos;IPv6&apos;. </param>
        /// <param name="applicationGatewayBackendAddressPools"> The application gateway backend address pools. </param>
        /// <param name="applicationSecurityGroups"> Specifies an array of references to application security group. </param>
        /// <param name="loadBalancerBackendAddressPools"> The load balancer backend address pools. </param>
        /// <param name="loadBalancerInboundNatPools"> The load balancer inbound nat pools. </param>
        public static VirtualMachineScaleSetUpdateIPConfiguration VirtualMachineScaleSetUpdateIPConfiguration(string id = default, string name = default, WritableSubResource subnet = default, bool? primary = default, VirtualMachineScaleSetUpdatePublicIPAddressConfiguration publicIPAddressConfiguration = default, IPVersion? privateIPAddressVersion = default, IList<WritableSubResource> applicationGatewayBackendAddressPools = default, IList<WritableSubResource> applicationSecurityGroups = default, IList<WritableSubResource> loadBalancerBackendAddressPools = default, IList<WritableSubResource> loadBalancerInboundNatPools = default)
        {
            return new VirtualMachineScaleSetUpdateIPConfiguration(id, name, subnet, primary, publicIPAddressConfiguration, privateIPAddressVersion, applicationGatewayBackendAddressPools, applicationSecurityGroups, loadBalancerBackendAddressPools, loadBalancerInboundNatPools);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetUpdatePublicIPAddressConfiguration. </summary>
        /// <param name="name"> The publicIP address configuration name. </param>
        /// <param name="idleTimeoutInMinutes"> The idle timeout of the public IP address. </param>
        /// <param name="dnsSettings"> The dns settings to be applied on the publicIP addresses . </param>
        public static VirtualMachineScaleSetUpdatePublicIPAddressConfiguration VirtualMachineScaleSetUpdatePublicIPAddressConfiguration(string name = default, int? idleTimeoutInMinutes = default, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings dnsSettings = default)
        {
            return new VirtualMachineScaleSetUpdatePublicIPAddressConfiguration(name, idleTimeoutInMinutes, dnsSettings);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetInstanceView. </summary>
        /// <param name="virtualMachine"> The instance view status summary for the virtual machine scale set. </param>
        /// <param name="extensions"> The extensions information. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <param name="orchestrationServices"> The orchestration services information. </param>
        public static VirtualMachineScaleSetInstanceView VirtualMachineScaleSetInstanceView(VirtualMachineScaleSetInstanceViewStatusesSummary virtualMachine = default, IReadOnlyList<VirtualMachineScaleSetVmExtensionsSummary> extensions = default, IReadOnlyList<InstanceViewStatus> statuses = default, IReadOnlyList<OrchestrationServiceSummary> orchestrationServices = default)
        {
            return new VirtualMachineScaleSetInstanceView(virtualMachine, extensions, statuses, orchestrationServices);
        }

        /// <summary> Initializes a new instance of VirtualMachineStatusCodeCount. </summary>
        /// <param name="code"> The instance view status code. </param>
        /// <param name="count"> The number of instances having a particular status code. </param>
        public static VirtualMachineStatusCodeCount VirtualMachineStatusCodeCount(string code = default, int? count = default)
        {
            return new VirtualMachineStatusCodeCount(code, count);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmExtensionsSummary. </summary>
        /// <param name="name"> The extension name. </param>
        /// <param name="statusesSummary"> The extensions information. </param>
        public static VirtualMachineScaleSetVmExtensionsSummary VirtualMachineScaleSetVmExtensionsSummary(string name = default, IReadOnlyList<VirtualMachineStatusCodeCount> statusesSummary = default)
        {
            return new VirtualMachineScaleSetVmExtensionsSummary(name, statusesSummary);
        }

        /// <summary> Initializes a new instance of OrchestrationServiceSummary. </summary>
        /// <param name="serviceName"> The name of the service. </param>
        /// <param name="serviceState"> The current state of the service. </param>
        public static OrchestrationServiceSummary OrchestrationServiceSummary(OrchestrationServiceNames? serviceName = default, OrchestrationServiceState? serviceState = default)
        {
            return new OrchestrationServiceSummary(serviceName, serviceState);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetListResult. </summary>
        /// <param name="value"> The list of virtual machine scale sets. </param>
        /// <param name="nextLink"> The uri to fetch the next page of Virtual Machine Scale Sets. Call ListNext() with this to fetch the next page of VMSS. </param>
        public static VirtualMachineScaleSetListResult VirtualMachineScaleSetListResult(IReadOnlyList<VirtualMachineScaleSetData> value = default, string nextLink = default)
        {
            return new VirtualMachineScaleSetListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of PatchableVirtualMachineScaleSetExtensionData. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The name of the extension. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="forceUpdateTag"> If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed. </param>
        /// <param name="publisher"> The name of the extension handler publisher. </param>
        /// <param name="typePropertiesType"> Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="autoUpgradeMinorVersion"> Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. </param>
        /// <param name="enableAutomaticUpgrade"> Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. </param>
        /// <param name="settings"> Json formatted public settings for the extension. </param>
        /// <param name="protectedSettings"> The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="provisionAfterExtensions"> Collection of extension names after which this extension needs to be provisioned. </param>
        public static PatchableVirtualMachineScaleSetExtensionData PatchableVirtualMachineScaleSetExtensionData(string id = default, string name = default, string resourceType = default, string forceUpdateTag = default, string publisher = default, string typePropertiesType = default, string typeHandlerVersion = default, bool? autoUpgradeMinorVersion = default, bool? enableAutomaticUpgrade = default, BinaryData settings = default, BinaryData protectedSettings = default, string provisioningState = default, IList<string> provisionAfterExtensions = default)
        {
            return new PatchableVirtualMachineScaleSetExtensionData(id, name, resourceType, forceUpdateTag, publisher, typePropertiesType, typeHandlerVersion, autoUpgradeMinorVersion, enableAutomaticUpgrade, settings, protectedSettings, provisioningState, provisionAfterExtensions);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetExtensionListResult. </summary>
        /// <param name="value"> The list of VM scale set extensions. </param>
        /// <param name="nextLink"> The uri to fetch the next page of VM scale set extensions. Call ListNext() with this to fetch the next page of VM scale set extensions. </param>
        public static VirtualMachineScaleSetExtensionListResult VirtualMachineScaleSetExtensionListResult(IReadOnlyList<VirtualMachineScaleSetExtensionData> value = default, string nextLink = default)
        {
            return new VirtualMachineScaleSetExtensionListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetListWithLinkResult. </summary>
        /// <param name="value"> The list of virtual machine scale sets. </param>
        /// <param name="nextLink"> The uri to fetch the next page of Virtual Machine Scale Sets. Call ListNext() with this to fetch the next page of Virtual Machine Scale Sets. </param>
        public static VirtualMachineScaleSetListWithLinkResult VirtualMachineScaleSetListWithLinkResult(IReadOnlyList<VirtualMachineScaleSetData> value = default, string nextLink = default)
        {
            return new VirtualMachineScaleSetListWithLinkResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetListSkusResult. </summary>
        /// <param name="value"> The list of skus available for the virtual machine scale set. </param>
        /// <param name="nextLink"> The uri to fetch the next page of Virtual Machine Scale Set Skus. Call ListNext() with this to fetch the next page of VMSS Skus. </param>
        public static VirtualMachineScaleSetListSkusResult VirtualMachineScaleSetListSkusResult(IReadOnlyList<VirtualMachineScaleSetSku> value = default, string nextLink = default)
        {
            return new VirtualMachineScaleSetListSkusResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetSku. </summary>
        /// <param name="resourceType"> The type of resource the sku applies to. </param>
        /// <param name="sku"> The Sku. </param>
        /// <param name="capacity"> Specifies the number of virtual machines in the scale set. </param>
        public static VirtualMachineScaleSetSku VirtualMachineScaleSetSku(string resourceType = default, MgmtRenameRulesSku sku = default, VirtualMachineScaleSetSkuCapacity capacity = default)
        {
            return new VirtualMachineScaleSetSku(resourceType, sku, capacity);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetSkuCapacity. </summary>
        /// <param name="minimum"> The minimum capacity. </param>
        /// <param name="maximum"> The maximum capacity that can be set. </param>
        /// <param name="defaultCapacity"> The default capacity. </param>
        /// <param name="scaleType"> The scale type applicable to the sku. </param>
        public static VirtualMachineScaleSetSkuCapacity VirtualMachineScaleSetSkuCapacity(long? minimum = default, long? maximum = default, long? defaultCapacity = default, VirtualMachineScaleSetSkuScaleType? scaleType = default)
        {
            return new VirtualMachineScaleSetSkuCapacity(minimum, maximum, defaultCapacity, scaleType);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetListOSUpgradeHistory. </summary>
        /// <param name="value"> The list of OS upgrades performed on the virtual machine scale set. </param>
        /// <param name="nextLink"> The uri to fetch the next page of OS Upgrade History. Call ListNext() with this to fetch the next page of history of upgrades. </param>
        public static VirtualMachineScaleSetListOSUpgradeHistory VirtualMachineScaleSetListOSUpgradeHistory(IReadOnlyList<UpgradeOperationHistoricalStatusInfo> value = default, string nextLink = default)
        {
            return new VirtualMachineScaleSetListOSUpgradeHistory(value, nextLink);
        }

        /// <summary> Initializes a new instance of UpgradeOperationHistoricalStatusInfo. </summary>
        /// <param name="properties"> Information about the properties of the upgrade operation. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        public static UpgradeOperationHistoricalStatusInfo UpgradeOperationHistoricalStatusInfo(UpgradeOperationHistoricalStatusInfoProperties properties = default, ResourceType? resourceType = default, string location = default)
        {
            return new UpgradeOperationHistoricalStatusInfo(properties, resourceType, location);
        }

        /// <summary> Initializes a new instance of UpgradeOperationHistoricalStatusInfoProperties. </summary>
        /// <param name="runningStatus"> Information about the overall status of the upgrade operation. </param>
        /// <param name="progress"> Counts of the VMs in each state. </param>
        /// <param name="error"> Error Details for this upgrade if there are any. </param>
        /// <param name="startedBy"> Invoker of the Upgrade Operation. </param>
        /// <param name="targetImageReference"> Image Reference details. </param>
        /// <param name="rollbackInfo"> Information about OS rollback if performed. </param>
        public static UpgradeOperationHistoricalStatusInfoProperties UpgradeOperationHistoricalStatusInfoProperties(UpgradeOperationHistoryStatus runningStatus = default, RollingUpgradeProgressInfo progress = default, ApiError error = default, UpgradeOperationInvoker? startedBy = default, ImageReference targetImageReference = default, RollbackStatusInfo rollbackInfo = default)
        {
            return new UpgradeOperationHistoricalStatusInfoProperties(runningStatus, progress, error, startedBy, targetImageReference, rollbackInfo);
        }

        /// <summary> Initializes a new instance of UpgradeOperationHistoryStatus. </summary>
        /// <param name="code"> Code indicating the current status of the upgrade. </param>
        /// <param name="startTime"> Start time of the upgrade. </param>
        /// <param name="endTime"> End time of the upgrade. </param>
        public static UpgradeOperationHistoryStatus UpgradeOperationHistoryStatus(UpgradeState? code = default, DateTimeOffset? startTime = default, DateTimeOffset? endTime = default)
        {
            return new UpgradeOperationHistoryStatus(code, startTime, endTime);
        }

        /// <summary> Initializes a new instance of RollingUpgradeProgressInfo. </summary>
        /// <param name="successfulInstanceCount"> The number of instances that have been successfully upgraded. </param>
        /// <param name="failedInstanceCount"> The number of instances that have failed to be upgraded successfully. </param>
        /// <param name="inProgressInstanceCount"> The number of instances that are currently being upgraded. </param>
        /// <param name="pendingInstanceCount"> The number of instances that have not yet begun to be upgraded. </param>
        public static RollingUpgradeProgressInfo RollingUpgradeProgressInfo(int? successfulInstanceCount = default, int? failedInstanceCount = default, int? inProgressInstanceCount = default, int? pendingInstanceCount = default)
        {
            return new RollingUpgradeProgressInfo(successfulInstanceCount, failedInstanceCount, inProgressInstanceCount, pendingInstanceCount);
        }

        /// <summary> Initializes a new instance of RollbackStatusInfo. </summary>
        /// <param name="successfullyRolledbackInstanceCount"> The number of instances which have been successfully rolled back. </param>
        /// <param name="failedRolledbackInstanceCount"> The number of instances which failed to rollback. </param>
        /// <param name="rollbackError"> Error details if OS rollback failed. </param>
        public static RollbackStatusInfo RollbackStatusInfo(int? successfullyRolledbackInstanceCount = default, int? failedRolledbackInstanceCount = default, ApiError rollbackError = default)
        {
            return new RollbackStatusInfo(successfullyRolledbackInstanceCount, failedRolledbackInstanceCount, rollbackError);
        }

        /// <summary> Initializes a new instance of RollingUpgradeRunningStatus. </summary>
        /// <param name="code"> Code indicating the current status of the upgrade. </param>
        /// <param name="startTime"> Start time of the upgrade. </param>
        /// <param name="lastAction"> The last action performed on the rolling upgrade. </param>
        /// <param name="lastActionTime"> Last action time of the upgrade. </param>
        public static RollingUpgradeRunningStatus RollingUpgradeRunningStatus(RollingUpgradeStatusCode? code = default, DateTimeOffset? startTime = default, RollingUpgradeActionType? lastAction = default, DateTimeOffset? lastActionTime = default)
        {
            return new RollingUpgradeRunningStatus(code, startTime, lastAction, lastActionTime);
        }

        /// <summary> Initializes a new instance of RecoveryWalkResponse. </summary>
        /// <param name="walkPerformed"> Whether the recovery walk was performed. </param>
        /// <param name="nextPlatformUpdateDomain"> The next update domain that needs to be walked. Null means walk spanning all update domains has been completed. </param>
        public static RecoveryWalkResponse RecoveryWalkResponse(bool? walkPerformed = default, int? nextPlatformUpdateDomain = default)
        {
            return new RecoveryWalkResponse(walkPerformed, nextPlatformUpdateDomain);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmInstanceView. </summary>
        /// <param name="platformUpdateDomain"> The Update Domain count. </param>
        /// <param name="platformFaultDomain"> The Fault Domain count. </param>
        /// <param name="rdpThumbPrint"> The Remote desktop certificate thumbprint. </param>
        /// <param name="vmAgent"> The VM Agent running on the virtual machine. </param>
        /// <param name="maintenanceRedeployStatus"> The Maintenance Operation status on the virtual machine. </param>
        /// <param name="disks"> The disks information. </param>
        /// <param name="vmHealth"> The health status for the VM. </param>
        /// <param name="bootDiagnostics"> Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. &lt;br&gt;&lt;br&gt; You can easily view the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you to see a screenshot of the VM from the hypervisor. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <param name="assignedHost"> Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. </param>
        /// <param name="placementGroupId"> The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId. </param>
        public static VirtualMachineScaleSetVmInstanceView VirtualMachineScaleSetVmInstanceView(int? platformUpdateDomain = default, int? platformFaultDomain = default, string rdpThumbPrint = default, VirtualMachineAgentInstanceView vmAgent = default, MaintenanceRedeployStatus maintenanceRedeployStatus = default, IReadOnlyList<DiskInstanceView> disks = default, VirtualMachineHealthStatus vmHealth = default, BootDiagnosticsInstanceView bootDiagnostics = default, IReadOnlyList<InstanceViewStatus> statuses = default, string assignedHost = default, string placementGroupId = default)
        {
            return new VirtualMachineScaleSetVmInstanceView(platformUpdateDomain, platformFaultDomain, rdpThumbPrint, vmAgent, maintenanceRedeployStatus, disks, vmHealth, bootDiagnostics, statuses, assignedHost, placementGroupId);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmProtectionPolicy. </summary>
        /// <param name="protectFromScaleIn"> Indicates that the virtual machine scale set VM shouldn&apos;t be considered for deletion during a scale-in operation. </param>
        /// <param name="protectFromScaleSetActions"> Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM. </param>
        public static VirtualMachineScaleSetVmProtectionPolicy VirtualMachineScaleSetVmProtectionPolicy(bool? protectFromScaleIn = default, bool? protectFromScaleSetActions = default)
        {
            return new VirtualMachineScaleSetVmProtectionPolicy(protectFromScaleIn, protectFromScaleSetActions);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmListResult. </summary>
        /// <param name="value"> The list of virtual machine scale sets VMs. </param>
        /// <param name="nextLink"> The uri to fetch the next page of Virtual Machine Scale Set VMs. Call ListNext() with this to fetch the next page of VMSS VMs. </param>
        public static VirtualMachineScaleSetVmListResult VirtualMachineScaleSetVmListResult(IReadOnlyList<VirtualMachineScaleSetVmData> value = default, string nextLink = default)
        {
            return new VirtualMachineScaleSetVmListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of LogAnalytics. </summary>
        /// <param name="properties"> LogAnalyticsOutput. </param>
        public static LogAnalytics LogAnalytics(LogAnalyticsOutput properties = default)
        {
            return new LogAnalytics(properties);
        }
    }
}
