// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using MgmtScopeResource;

namespace MgmtScopeResource.Models
{
    internal static class MgmtScopeResourceModelFactory
    {
        /// <summary> Initializes a new instance of ParameterValuesValue. </summary>
        /// <param name="value"> The value of the parameter. </param>
        public static ParameterValuesValue ParameterValuesValue(BinaryData value = default)
        {
            return new ParameterValuesValue(value);
        }

        /// <summary> Initializes a new instance of NonComplianceMessage. </summary>
        /// <param name="message"> A message that describes why a resource is non-compliant with the policy. This is shown in &apos;deny&apos; error messages and on resource&apos;s non-compliant compliance results. </param>
        /// <param name="policyDefinitionReferenceId"> The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment. </param>
        public static NonComplianceMessage NonComplianceMessage(string message = default, string policyDefinitionReferenceId = default)
        {
            return new NonComplianceMessage(message, policyDefinitionReferenceId);
        }

        /// <summary> Initializes a new instance of CloudError. </summary>
        /// <param name="errorResponse"> Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message. </param>
        public static CloudError CloudError(ErrorResponse errorResponse = default)
        {
            return new CloudError(errorResponse);
        }

        /// <summary> Initializes a new instance of FakePolicyAssignmentListResult. </summary>
        /// <param name="value"> An array of policy assignments. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        public static FakePolicyAssignmentListResult FakePolicyAssignmentListResult(IReadOnlyList<FakePolicyAssignmentData> value = default, string nextLink = default)
        {
            return new FakePolicyAssignmentListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of DeploymentPropertiesExtended. </summary>
        /// <param name="provisioningState"> Denotes the state of provisioning. </param>
        /// <param name="correlationId"> The correlation ID of the deployment. </param>
        /// <param name="timestamp"> The timestamp of the template deployment. </param>
        /// <param name="duration"> The duration of the template deployment. </param>
        /// <param name="outputs"> Key/value pairs that represent deployment output. </param>
        /// <param name="parameters"> Deployment parameters. </param>
        /// <param name="errorResponse"> The deployment error. </param>
        public static DeploymentPropertiesExtended DeploymentPropertiesExtended(ProvisioningState? provisioningState = default, string correlationId = default, DateTimeOffset? timestamp = default, TimeSpan? duration = default, BinaryData outputs = default, BinaryData parameters = default, ErrorResponse errorResponse = default)
        {
            return new DeploymentPropertiesExtended(provisioningState, correlationId, timestamp, duration, outputs, parameters, errorResponse);
        }

        /// <summary> Initializes a new instance of DeploymentValidateResult. </summary>
        /// <param name="errorResponse"> The deployment validation error. </param>
        /// <param name="properties"> The template deployment properties. </param>
        public static DeploymentValidateResult DeploymentValidateResult(ErrorResponse errorResponse = default, DeploymentPropertiesExtended properties = default)
        {
            return new DeploymentValidateResult(errorResponse, properties);
        }

        /// <summary> Initializes a new instance of DeploymentExportResult. </summary>
        /// <param name="template"> The template content. </param>
        public static DeploymentExportResult DeploymentExportResult(BinaryData template = default)
        {
            return new DeploymentExportResult(template);
        }

        /// <summary> Initializes a new instance of DeploymentListResult. </summary>
        /// <param name="value"> An array of deployments. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        public static DeploymentListResult DeploymentListResult(IReadOnlyList<DeploymentExtendedData> value = default, string nextLink = default)
        {
            return new DeploymentListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of WhatIfOperationResult. </summary>
        /// <param name="status"> Status of the What-If operation. </param>
        /// <param name="errorResponse"> Error when What-If operation fails. </param>
        /// <param name="changes"> List of resource changes predicted by What-If operation. </param>
        public static WhatIfOperationResult WhatIfOperationResult(string status = default, ErrorResponse errorResponse = default, IReadOnlyList<WhatIfChange> changes = default)
        {
            return new WhatIfOperationResult(status, errorResponse, changes);
        }

        /// <summary> Initializes a new instance of WhatIfChange. </summary>
        /// <param name="resourceId"> Resource ID. </param>
        /// <param name="changeType"> Type of change that will be made to the resource when the deployment is executed. </param>
        /// <param name="unsupportedReason"> The explanation about why the resource is unsupported by What-If. </param>
        /// <param name="before"> The snapshot of the resource before the deployment is executed. </param>
        /// <param name="after"> The predicted snapshot of the resource after the deployment is executed. </param>
        public static WhatIfChange WhatIfChange(string resourceId = default, ChangeType changeType = default, string unsupportedReason = default, BinaryData before = default, BinaryData after = default)
        {
            return new WhatIfChange(resourceId, changeType, unsupportedReason, before, after);
        }

        /// <summary> Initializes a new instance of DeploymentOperation. </summary>
        /// <param name="id"> Full deployment operation ID. </param>
        /// <param name="operationId"> Deployment operation ID. </param>
        /// <param name="properties"> Deployment properties. </param>
        public static DeploymentOperation DeploymentOperation(string id = default, string operationId = default, DeploymentOperationProperties properties = default)
        {
            return new DeploymentOperation(id, operationId, properties);
        }

        /// <summary> Initializes a new instance of DeploymentOperationProperties. </summary>
        /// <param name="provisioningOperation"> The name of the current provisioning operation. </param>
        /// <param name="provisioningState"> The state of the provisioning. </param>
        /// <param name="timestamp"> The date and time of the operation. </param>
        /// <param name="duration"> The duration of the operation. </param>
        /// <param name="anotherDuration"> Another duration of the operation. </param>
        /// <param name="serviceRequestId"> Deployment operation service request id. </param>
        /// <param name="statusCode"> Operation status code from the resource provider. This property may not be set if a response has not yet been received. </param>
        /// <param name="statusMessage"> Operation status message from the resource provider. This property is optional.  It will only be provided if an error was received from the resource provider. </param>
        /// <param name="request"> The HTTP request message. </param>
        /// <param name="response"> The HTTP response message. </param>
        public static DeploymentOperationProperties DeploymentOperationProperties(ProvisioningOperation? provisioningOperation = default, string provisioningState = default, DateTimeOffset? timestamp = default, TimeSpan? duration = default, TimeSpan? anotherDuration = default, string serviceRequestId = default, string statusCode = default, StatusMessage statusMessage = default, HttpMessage request = default, HttpMessage response = default)
        {
            return new DeploymentOperationProperties(provisioningOperation, provisioningState, timestamp, duration, anotherDuration, serviceRequestId, statusCode, statusMessage, request, response);
        }

        /// <summary> Initializes a new instance of StatusMessage. </summary>
        /// <param name="status"> Status of the deployment operation. </param>
        /// <param name="errorResponse"> The error reported by the operation. </param>
        public static StatusMessage StatusMessage(string status = default, ErrorResponse errorResponse = default)
        {
            return new StatusMessage(status, errorResponse);
        }

        /// <summary> Initializes a new instance of DeploymentOperationsListResult. </summary>
        /// <param name="value"> An array of deployment operations. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        public static DeploymentOperationsListResult DeploymentOperationsListResult(IReadOnlyList<DeploymentOperation> value = default, string nextLink = default)
        {
            return new DeploymentOperationsListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of TemplateHashResult. </summary>
        /// <param name="minifiedTemplate"> The minified template string. </param>
        /// <param name="templateHash"> The template hash. </param>
        public static TemplateHashResult TemplateHashResult(string minifiedTemplate = default, string templateHash = default)
        {
            return new TemplateHashResult(minifiedTemplate, templateHash);
        }

        /// <summary> Initializes a new instance of ResourceLinkProperties. </summary>
        /// <param name="sourceId"> The fully qualified ID of the source resource in the link. </param>
        /// <param name="targetId"> The fully qualified ID of the target resource in the link. </param>
        /// <param name="notes"> Notes about the resource link. </param>
        public static ResourceLinkProperties ResourceLinkProperties(string sourceId = default, string targetId = default, string notes = default)
        {
            return new ResourceLinkProperties(sourceId, targetId, notes);
        }

        /// <summary> Initializes a new instance of ResourceLinkResult. </summary>
        /// <param name="value"> An array of resource links. </param>
        /// <param name="nextLink"> The URL to use for getting the next set of results. </param>
        public static ResourceLinkResult ResourceLinkResult(IReadOnlyList<ResourceLinkData> value = default, string nextLink = default)
        {
            return new ResourceLinkResult(value, nextLink);
        }
    }
}
