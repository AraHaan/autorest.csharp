// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using MgmtDiscriminator;

namespace MgmtDiscriminator.Models
{
    internal static class MgmtDiscriminatorModelFactory
    {

        /// <summary> Initializes a new instance of DeliveryRuleProperties. </summary>
        /// <param name="order"> The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied. </param>
        /// <param name="actions"> A list of actions that are executed when all the conditions of a rule are satisfied. </param>
        public static DeliveryRuleProperties DeliveryRuleProperties(int? order = default, IList<DeliveryRuleAction> actions = default)
        {
            return new DeliveryRuleProperties(order, actions);
        }

        /// <summary> Initializes a new instance of DeliveryRuleAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        public static DeliveryRuleAction DeliveryRuleAction(DeliveryRuleActionType name = default)
        {
            return new DeliveryRuleAction(name);
        }

        /// <summary> Initializes a new instance of ErrorResponse. </summary>
        /// <param name="error"> The error object. </param>
        public static ErrorResponse ErrorResponse(Azure.ResourceManager.Models.ErrorDetail error = default)
        {
            return new ErrorResponse(error);
        }

        /// <summary> Initializes a new instance of ErrorDetail. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <param name="details"> The error details. </param>
        /// <param name="additionalInfo"> The error additional info. </param>
        public static ErrorDetail ErrorDetail(string code = default, string message = default, string target = default, IReadOnlyList<Azure.ResourceManager.Models.ErrorDetail> details = default, IReadOnlyList<Azure.ResourceManager.Models.ErrorAdditionalInfo> additionalInfo = default)
        {
            return new ErrorDetail(code, message, target, details, additionalInfo);
        }

        /// <summary> Initializes a new instance of ErrorAdditionalInfo. </summary>
        /// <param name="errorAdditionalInfoType"> The additional info type. </param>
        /// <param name="info"> The additional info. </param>
        public static ErrorAdditionalInfo ErrorAdditionalInfo(string errorAdditionalInfoType = default, BinaryData info = default)
        {
            return new ErrorAdditionalInfo(errorAdditionalInfoType, info);
        }

        /// <summary> Initializes a new instance of UrlRedirectAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        /// <param name="parameters"> Defines the parameters for the action. </param>
        public static UrlRedirectAction UrlRedirectAction(DeliveryRuleActionType name = default, UrlRedirectActionParameters parameters = default)
        {
            return new UrlRedirectAction(name, parameters);
        }

        /// <summary> Initializes a new instance of UrlRedirectActionParameters. </summary>
        /// <param name="typeName"></param>
        /// <param name="redirectType"> The redirect type the rule will use when redirecting traffic. </param>
        /// <param name="destinationProtocol"> Protocol to use for the redirect. The default value is MatchRequest. </param>
        /// <param name="customPath"> The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path. </param>
        /// <param name="customHostname"> Host to redirect. Leave empty to use the incoming host as the destination host. </param>
        /// <param name="customQueryString"> The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in &lt;key&gt;=&lt;value&gt; format. ? and &amp; will be added automatically so do not include them. </param>
        /// <param name="customFragment"> Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #. </param>
        public static UrlRedirectActionParameters UrlRedirectActionParameters(UrlRedirectActionParametersTypeName typeName = default, RedirectType redirectType = default, DestinationProtocol? destinationProtocol = default, string customPath = default, string customHostname = default, string customQueryString = default, string customFragment = default)
        {
            return new UrlRedirectActionParameters(typeName, redirectType, destinationProtocol, customPath, customHostname, customQueryString, customFragment);
        }

        /// <summary> Initializes a new instance of UrlSigningAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        /// <param name="parameters"> Defines the parameters for the action. </param>
        public static UrlSigningAction UrlSigningAction(DeliveryRuleActionType name = default, UrlSigningActionParameters parameters = default)
        {
            return new UrlSigningAction(name, parameters);
        }

        /// <summary> Initializes a new instance of UrlSigningActionParameters. </summary>
        /// <param name="typeName"></param>
        /// <param name="algorithm"> Algorithm to use for URL signing. </param>
        /// <param name="parameterNameOverride"> Defines which query string parameters in the url to be considered for expires, key id etc. </param>
        public static UrlSigningActionParameters UrlSigningActionParameters(UrlSigningActionParametersTypeName typeName = default, Algorithm? algorithm = default, IList<UrlSigningParamIdentifier> parameterNameOverride = default)
        {
            return new UrlSigningActionParameters(typeName, algorithm, parameterNameOverride);
        }

        /// <summary> Initializes a new instance of UrlSigningParamIdentifier. </summary>
        /// <param name="paramIndicator"> Indicates the purpose of the parameter. </param>
        /// <param name="paramName"> Parameter name. </param>
        public static UrlSigningParamIdentifier UrlSigningParamIdentifier(ParamIndicator paramIndicator = default, string paramName = default)
        {
            return new UrlSigningParamIdentifier(paramIndicator, paramName);
        }

        /// <summary> Initializes a new instance of OriginGroupOverrideAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        /// <param name="parameters"> Defines the parameters for the action. </param>
        public static OriginGroupOverrideAction OriginGroupOverrideAction(DeliveryRuleActionType name = default, OriginGroupOverrideActionParameters parameters = default)
        {
            return new OriginGroupOverrideAction(name, parameters);
        }

        /// <summary> Initializes a new instance of OriginGroupOverrideActionParameters. </summary>
        /// <param name="typeName"></param>
        /// <param name="originGroup"> defines the OriginGroup that would override the DefaultOriginGroup. </param>
        public static OriginGroupOverrideActionParameters OriginGroupOverrideActionParameters(OriginGroupOverrideActionParametersTypeName typeName = default, WritableSubResource originGroup = default)
        {
            return new OriginGroupOverrideActionParameters(typeName, originGroup);
        }

        /// <summary> Initializes a new instance of UrlRewriteAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        /// <param name="parameters"> Defines the parameters for the action. </param>
        public static UrlRewriteAction UrlRewriteAction(DeliveryRuleActionType name = default, UrlRewriteActionParameters parameters = default)
        {
            return new UrlRewriteAction(name, parameters);
        }

        /// <summary> Initializes a new instance of UrlRewriteActionParameters. </summary>
        /// <param name="typeName"></param>
        /// <param name="sourcePattern"> define a request URI pattern that identifies the type of requests that may be rewritten. If value is blank, all strings are matched. </param>
        /// <param name="destination"> Define the relative URL to which the above requests will be rewritten by. </param>
        /// <param name="preserveUnmatchedPath"> Whether to preserve unmatched path. Default value is true. </param>
        public static UrlRewriteActionParameters UrlRewriteActionParameters(UrlRewriteActionParametersTypeName typeName = default, string sourcePattern = default, string destination = default, bool? preserveUnmatchedPath = default)
        {
            return new UrlRewriteActionParameters(typeName, sourcePattern, destination, preserveUnmatchedPath);
        }

        /// <summary> Initializes a new instance of DeliveryRuleRequestHeaderAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        /// <param name="parameters"> Defines the parameters for the action. </param>
        public static DeliveryRuleRequestHeaderAction DeliveryRuleRequestHeaderAction(DeliveryRuleActionType name = default, HeaderActionParameters parameters = default)
        {
            return new DeliveryRuleRequestHeaderAction(name, parameters);
        }

        /// <summary> Initializes a new instance of HeaderActionParameters. </summary>
        /// <param name="typeName"></param>
        /// <param name="headerAction"> Action to perform. </param>
        /// <param name="headerName"> Name of the header to modify. </param>
        /// <param name="value"> Value for the specified action. </param>
        public static HeaderActionParameters HeaderActionParameters(HeaderActionParametersTypeName typeName = default, HeaderAction headerAction = default, string headerName = default, string value = default)
        {
            return new HeaderActionParameters(typeName, headerAction, headerName, value);
        }

        /// <summary> Initializes a new instance of DeliveryRuleResponseHeaderAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        /// <param name="parameters"> Defines the parameters for the action. </param>
        public static DeliveryRuleResponseHeaderAction DeliveryRuleResponseHeaderAction(DeliveryRuleActionType name = default, HeaderActionParameters parameters = default)
        {
            return new DeliveryRuleResponseHeaderAction(name, parameters);
        }

        /// <summary> Initializes a new instance of DeliveryRuleCacheExpirationAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        /// <param name="parameters"> Defines the parameters for the action. </param>
        public static DeliveryRuleCacheExpirationAction DeliveryRuleCacheExpirationAction(DeliveryRuleActionType name = default, CacheExpirationActionParameters parameters = default)
        {
            return new DeliveryRuleCacheExpirationAction(name, parameters);
        }

        /// <summary> Initializes a new instance of CacheExpirationActionParameters. </summary>
        /// <param name="typeName"></param>
        /// <param name="cacheBehavior"> Caching behavior for the requests. </param>
        /// <param name="cacheType"> The level at which the content needs to be cached. </param>
        /// <param name="cacheDuration"> The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss. </param>
        public static CacheExpirationActionParameters CacheExpirationActionParameters(CacheExpirationActionParametersTypeName typeName = default, CacheBehavior cacheBehavior = default, CacheType cacheType = default, TimeSpan? cacheDuration = default)
        {
            return new CacheExpirationActionParameters(typeName, cacheBehavior, cacheType, cacheDuration);
        }

        /// <summary> Initializes a new instance of DeliveryRuleCacheKeyQueryStringAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        /// <param name="parameters"> Defines the parameters for the action. </param>
        public static DeliveryRuleCacheKeyQueryStringAction DeliveryRuleCacheKeyQueryStringAction(DeliveryRuleActionType name = default, CacheKeyQueryStringActionParameters parameters = default)
        {
            return new DeliveryRuleCacheKeyQueryStringAction(name, parameters);
        }

        /// <summary> Initializes a new instance of CacheKeyQueryStringActionParameters. </summary>
        /// <param name="typeName"></param>
        /// <param name="queryStringBehavior"> Caching behavior for the requests. </param>
        /// <param name="queryParameters"> query parameters to include or exclude (comma separated). </param>
        public static CacheKeyQueryStringActionParameters CacheKeyQueryStringActionParameters(CacheKeyQueryStringActionParametersTypeName typeName = default, QueryStringBehavior queryStringBehavior = default, string queryParameters = default)
        {
            return new CacheKeyQueryStringActionParameters(typeName, queryStringBehavior, queryParameters);
        }

        /// <summary> Initializes a new instance of DeliveryRuleRouteConfigurationOverrideAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        /// <param name="parameters"> Defines the parameters for the action. </param>
        public static DeliveryRuleRouteConfigurationOverrideAction DeliveryRuleRouteConfigurationOverrideAction(DeliveryRuleActionType name = default, RouteConfigurationOverrideActionParameters parameters = default)
        {
            return new DeliveryRuleRouteConfigurationOverrideAction(name, parameters);
        }

        /// <summary> Initializes a new instance of RouteConfigurationOverrideActionParameters. </summary>
        /// <param name="typeName"></param>
        /// <param name="originGroupOverride"> A reference to the origin group override configuration. Leave empty to use the default origin group on route. </param>
        public static RouteConfigurationOverrideActionParameters RouteConfigurationOverrideActionParameters(RouteConfigurationOverrideActionParametersTypeName typeName = default, OriginGroupOverride originGroupOverride = default)
        {
            return new RouteConfigurationOverrideActionParameters(typeName, originGroupOverride);
        }

        /// <summary> Initializes a new instance of OriginGroupOverride. </summary>
        /// <param name="originGroup"> defines the OriginGroup that would override the DefaultOriginGroup on route. </param>
        /// <param name="forwardingProtocol"> Protocol this rule will use when forwarding traffic to backends. </param>
        public static OriginGroupOverride OriginGroupOverride(WritableSubResource originGroup = default, ForwardingProtocol? forwardingProtocol = default)
        {
            return new OriginGroupOverride(originGroup, forwardingProtocol);
        }
    }
}
