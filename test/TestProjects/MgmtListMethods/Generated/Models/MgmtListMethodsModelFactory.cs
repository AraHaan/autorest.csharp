// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using MgmtListMethods;

namespace MgmtListMethods.Models
{
    internal static class MgmtListMethodsModelFactory
    {

        /// <summary> Initializes a new instance of FakeListResult. </summary>
        /// <param name="value"> The list of fakes. </param>
        /// <param name="nextLink"> The URI to fetch the next page of Fakes. Call ListNext() with this URI to fetch the next page of Fakes. </param>
        public static FakeListResult FakeListResult(IReadOnlyList<FakeData> value = default, string nextLink = default)
        {
            return new FakeListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of FakeParentWithAncestorWithNonResChWithLocListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static FakeParentWithAncestorWithNonResChWithLocListResult FakeParentWithAncestorWithNonResChWithLocListResult(IReadOnlyList<FakeParentWithAncestorWithNonResChWithLocData> value = default, string nextLink = default)
        {
            return new FakeParentWithAncestorWithNonResChWithLocListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of NonResourceChild. </summary>
        /// <param name="name"> Name. </param>
        /// <param name="numberOfCores"> Test Desc. </param>
        public static NonResourceChild NonResourceChild(string name = default, int? numberOfCores = default)
        {
            return new NonResourceChild(name, numberOfCores);
        }

        /// <summary> Initializes a new instance of FakeParentWithAncestorWithNonResChListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static FakeParentWithAncestorWithNonResChListResult FakeParentWithAncestorWithNonResChListResult(IReadOnlyList<FakeParentWithAncestorWithNonResChData> value = default, string nextLink = default)
        {
            return new FakeParentWithAncestorWithNonResChListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of FakeParentWithAncestorWithLocListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static FakeParentWithAncestorWithLocListResult FakeParentWithAncestorWithLocListResult(IReadOnlyList<FakeParentWithAncestorWithLocData> value = default, string nextLink = default)
        {
            return new FakeParentWithAncestorWithLocListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of FakeParentWithAncestorListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static FakeParentWithAncestorListResult FakeParentWithAncestorListResult(IReadOnlyList<FakeParentWithAncestorData> value = default, string nextLink = default)
        {
            return new FakeParentWithAncestorListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of FakeParentWithNonResChListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static FakeParentWithNonResChListResult FakeParentWithNonResChListResult(IReadOnlyList<FakeParentWithNonResChData> value = default, string nextLink = default)
        {
            return new FakeParentWithNonResChListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of FakeParentListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static FakeParentListResult FakeParentListResult(IReadOnlyList<FakeParentData> value = default, string nextLink = default)
        {
            return new FakeParentListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of ResGrpParentWithAncestorWithNonResChWithLocListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static ResGrpParentWithAncestorWithNonResChWithLocListResult ResGrpParentWithAncestorWithNonResChWithLocListResult(IReadOnlyList<ResGrpParentWithAncestorWithNonResChWithLocData> value = default, string nextLink = default)
        {
            return new ResGrpParentWithAncestorWithNonResChWithLocListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of ResGrpParentWithAncestorWithNonResChListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static ResGrpParentWithAncestorWithNonResChListResult ResGrpParentWithAncestorWithNonResChListResult(IReadOnlyList<ResGrpParentWithAncestorWithNonResChData> value = default, string nextLink = default)
        {
            return new ResGrpParentWithAncestorWithNonResChListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of ResGrpParentWithAncestorWithLocListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static ResGrpParentWithAncestorWithLocListResult ResGrpParentWithAncestorWithLocListResult(IReadOnlyList<ResGrpParentWithAncestorWithLocData> value = default, string nextLink = default)
        {
            return new ResGrpParentWithAncestorWithLocListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of ResGrpParentWithNonResChListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static ResGrpParentWithNonResChListResult ResGrpParentWithNonResChListResult(IReadOnlyList<ResGrpParentWithNonResChData> value = default, string nextLink = default)
        {
            return new ResGrpParentWithNonResChListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of SubParentWithNonResChWithLocListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static SubParentWithNonResChWithLocListResult SubParentWithNonResChWithLocListResult(IReadOnlyList<SubParentWithNonResChWithLocData> value = default, string nextLink = default)
        {
            return new SubParentWithNonResChWithLocListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of SubParentWithNonResChListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static SubParentWithNonResChListResult SubParentWithNonResChListResult(IReadOnlyList<SubParentWithNonResChData> value = default, string nextLink = default)
        {
            return new SubParentWithNonResChListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of SubParentWithLocListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static SubParentWithLocListResult SubParentWithLocListResult(IReadOnlyList<SubParentWithLocData> value = default, string nextLink = default)
        {
            return new SubParentWithLocListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of SubParentListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static SubParentListResult SubParentListResult(IReadOnlyList<SubParentData> value = default, string nextLink = default)
        {
            return new SubParentListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of MgmtGrpParentWithNonResChWithLocListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static MgmtGrpParentWithNonResChWithLocListResult MgmtGrpParentWithNonResChWithLocListResult(IReadOnlyList<MgmtGrpParentWithNonResChWithLocData> value = default, string nextLink = default)
        {
            return new MgmtGrpParentWithNonResChWithLocListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of MgmtGrpParentWithNonResChListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static MgmtGrpParentWithNonResChListResult MgmtGrpParentWithNonResChListResult(IReadOnlyList<MgmtGrpParentWithNonResChData> value = default, string nextLink = default)
        {
            return new MgmtGrpParentWithNonResChListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of MgmtGrpParentWithLocListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static MgmtGrpParentWithLocListResult MgmtGrpParentWithLocListResult(IReadOnlyList<MgmtGrpParentWithLocData> value = default, string nextLink = default)
        {
            return new MgmtGrpParentWithLocListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of MgmtGroupParentListResult. </summary>
        /// <param name="value"> List. </param>
        /// <param name="nextLink"> The URI to fetch the next page. Call ListNext() with this URI to fetch the next page. </param>
        public static MgmtGroupParentListResult MgmtGroupParentListResult(IReadOnlyList<MgmtGroupParentData> value = default, string nextLink = default)
        {
            return new MgmtGroupParentListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of TenantTestListResult. </summary>
        /// <param name="value"> The list of fakes. </param>
        /// <param name="nextLink"> The URI to fetch the next page of Fakes. Call ListNext() with this URI to fetch the next page of Fakes. </param>
        public static TenantTestListResult TenantTestListResult(IReadOnlyList<TenantTestData> value = default, string nextLink = default)
        {
            return new TenantTestListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of TenantParentWithNonResChWithLocListResult. </summary>
        /// <param name="value"> The list of fakes. </param>
        /// <param name="nextLink"> The URI to fetch the next page of Fakes. Call ListNext() with this URI to fetch the next page of Fakes. </param>
        public static TenantParentWithNonResChWithLocListResult TenantParentWithNonResChWithLocListResult(IReadOnlyList<TenantParentWithNonResChWithLocData> value = default, string nextLink = default)
        {
            return new TenantParentWithNonResChWithLocListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of TenantParentWithNonResChListResult. </summary>
        /// <param name="value"> The list of fakes. </param>
        /// <param name="nextLink"> The URI to fetch the next page of Fakes. Call ListNext() with this URI to fetch the next page of Fakes. </param>
        public static TenantParentWithNonResChListResult TenantParentWithNonResChListResult(IReadOnlyList<TenantParentWithNonResChData> value = default, string nextLink = default)
        {
            return new TenantParentWithNonResChListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of TenantParentWithLocListResult. </summary>
        /// <param name="value"> The list of fakes. </param>
        /// <param name="nextLink"> The URI to fetch the next page of Fakes. Call ListNext() with this URI to fetch the next page of Fakes. </param>
        public static TenantParentWithLocListResult TenantParentWithLocListResult(IReadOnlyList<TenantParentWithLocData> value = default, string nextLink = default)
        {
            return new TenantParentWithLocListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of TenantParentListResult. </summary>
        /// <param name="value"> The list of fakes. </param>
        /// <param name="nextLink"> The URI to fetch the next page of Fakes. Call ListNext() with this URI to fetch the next page of Fakes. </param>
        public static TenantParentListResult TenantParentListResult(IReadOnlyList<TenantParentData> value = default, string nextLink = default)
        {
            return new TenantParentListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of UpdateWorkspaceQuotas. </summary>
        /// <param name="id"> Specifies the resource ID. </param>
        /// <param name="updateWorkspaceQuotasType"> Specifies the resource type. </param>
        /// <param name="limit"> The maximum permitted quota of the resource. </param>
        /// <param name="unit"> An enum describing the unit of quota measurement. </param>
        /// <param name="status"> Status of update workspace quota. </param>
        public static UpdateWorkspaceQuotas UpdateWorkspaceQuotas(string id = default, string updateWorkspaceQuotasType = default, long? limit = default, QuotaUnit? unit = default, Status? status = default)
        {
            return new UpdateWorkspaceQuotas(id, updateWorkspaceQuotasType, limit, unit, status);
        }
    }
}
