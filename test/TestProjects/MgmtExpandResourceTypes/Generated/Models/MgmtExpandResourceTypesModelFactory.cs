// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using MgmtExpandResourceTypes;

namespace MgmtExpandResourceTypes.Models
{
    internal static class MgmtExpandResourceTypesModelFactory
    {

        /// <summary> Initializes a new instance of ARecord. </summary>
        /// <param name="ipv4Address"> The IPv4 address of this A record. </param>
        public static ARecord ARecord(string ipv4Address = default)
        {
            return new ARecord(ipv4Address);
        }

        /// <summary> Initializes a new instance of AaaaRecord. </summary>
        /// <param name="ipv6Address"> The IPv6 address of this AAAA record. </param>
        public static AaaaRecord AaaaRecord(string ipv6Address = default)
        {
            return new AaaaRecord(ipv6Address);
        }

        /// <summary> Initializes a new instance of MxRecord. </summary>
        /// <param name="preference"> The preference value for this MX record. </param>
        /// <param name="exchange"> The domain name of the mail host for this MX record. </param>
        public static MxRecord MxRecord(int? preference = default, string exchange = default)
        {
            return new MxRecord(preference, exchange);
        }

        /// <summary> Initializes a new instance of NsRecord. </summary>
        /// <param name="nsdname"> The name server name for this NS record. </param>
        public static NsRecord NsRecord(string nsdname = default)
        {
            return new NsRecord(nsdname);
        }

        /// <summary> Initializes a new instance of PtrRecord. </summary>
        /// <param name="ptrdname"> The PTR target domain name for this PTR record. </param>
        public static PtrRecord PtrRecord(string ptrdname = default)
        {
            return new PtrRecord(ptrdname);
        }

        /// <summary> Initializes a new instance of SrvRecord. </summary>
        /// <param name="priority"> The priority value for this SRV record. </param>
        /// <param name="weight"> The weight value for this SRV record. </param>
        /// <param name="port"> The port value for this SRV record. </param>
        /// <param name="target"> The target domain name for this SRV record. </param>
        public static SrvRecord SrvRecord(int? priority = default, int? weight = default, int? port = default, string target = default)
        {
            return new SrvRecord(priority, weight, port, target);
        }

        /// <summary> Initializes a new instance of TxtRecord. </summary>
        /// <param name="value"> The text value of this TXT record. </param>
        public static TxtRecord TxtRecord(IList<string> value = default)
        {
            return new TxtRecord(value);
        }

        /// <summary> Initializes a new instance of SoaRecord. </summary>
        /// <param name="host"> The domain name of the authoritative name server for this SOA record. </param>
        /// <param name="email"> The email contact for this SOA record. </param>
        /// <param name="serialNumber"> The serial number for this SOA record. </param>
        /// <param name="refreshTime"> The refresh value for this SOA record. </param>
        /// <param name="retryTime"> The retry time for this SOA record. </param>
        /// <param name="expireTime"> The expire time for this SOA record. </param>
        /// <param name="minimumTtl"> The minimum value for this SOA record. By convention this is used to determine the negative caching duration. </param>
        public static SoaRecord SoaRecord(string host = default, string email = default, long? serialNumber = default, long? refreshTime = default, long? retryTime = default, long? expireTime = default, long? minimumTtl = default)
        {
            return new SoaRecord(host, email, serialNumber, refreshTime, retryTime, expireTime, minimumTtl);
        }

        /// <summary> Initializes a new instance of CaaRecord. </summary>
        /// <param name="flags"> The flags for this CAA record as an integer between 0 and 255. </param>
        /// <param name="tag"> The tag for this CAA record. </param>
        /// <param name="value"> The value for this CAA record. </param>
        public static CaaRecord CaaRecord(int? flags = default, string tag = default, string value = default)
        {
            return new CaaRecord(flags, tag, value);
        }

        /// <summary> Initializes a new instance of CloudError. </summary>
        /// <param name="error"> Cloud error body. </param>
        public static CloudError CloudError(CloudErrorBody error = default)
        {
            return new CloudError(error);
        }

        /// <summary> Initializes a new instance of CloudErrorBody. </summary>
        /// <param name="code"> An identifier for the error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the error, intended to be suitable for display in a user interface. </param>
        /// <param name="target"> The target of the particular error. For example, the name of the property in error. </param>
        /// <param name="details"> A list of additional details about the error. </param>
        public static CloudErrorBody CloudErrorBody(string code = default, string message = default, string target = default, IReadOnlyList<CloudErrorBody> details = default)
        {
            return new CloudErrorBody(code, message, target, details);
        }

        /// <summary> Initializes a new instance of RecordSetListResult. </summary>
        /// <param name="value"> Information about the record sets in the response. </param>
        /// <param name="nextLink"> The continuation token for the next page of results. </param>
        public static RecordSetListResult RecordSetListResult(IReadOnlyList<RecordSetData> value = default, string nextLink = default)
        {
            return new RecordSetListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of ZoneListResult. </summary>
        /// <param name="value"> Information about the DNS zones. </param>
        /// <param name="nextLink"> The continuation token for the next page of results. </param>
        public static ZoneListResult ZoneListResult(IReadOnlyList<ZoneData> value = default, string nextLink = default)
        {
            return new ZoneListResult(value, nextLink);
        }

        /// <summary> Initializes a new instance of DnsResourceReferenceResult. </summary>
        /// <param name="dnsResourceReferences"> The result of dns resource reference request. A list of dns resource references for each of the azure resource in the request. </param>
        public static DnsResourceReferenceResult DnsResourceReferenceResult(IReadOnlyList<DnsResourceReference> dnsResourceReferences = default)
        {
            return new DnsResourceReferenceResult(dnsResourceReferences);
        }

        /// <summary> Initializes a new instance of DnsResourceReference. </summary>
        /// <param name="dnsResources"> A list of dns Records. </param>
        /// <param name="targetResource"> A reference to an azure resource from where the dns resource value is taken. </param>
        public static DnsResourceReference DnsResourceReference(IReadOnlyList<WritableSubResource> dnsResources = default, WritableSubResource targetResource = default)
        {
            return new DnsResourceReference(dnsResources, targetResource);
        }
    }
}
